<?php
/**
 * InstantieApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Product API
 *
 * ### Access  The Product API is a public API. If you want to make use of this api, contact someone on the team to get an API key.  Each endpoint also lists the necessary permissions to call it. You can view your own permissions by calling the `/me` endpoint.   In a few cases some of the listed permissions are optional and depend upon the specific data requested.  ### Tracing  The API uses X-request-ID and X-correlation-ID headers.   Every request that hits the API without these headers, gets a new random UUID as request-ID and correlation-ID.  If you as a client pass these id's yourself, the API will use your values, but only when they are in UUID format.   If you provide a value that is not a UUID, the api will fail to handle your request.  Providing these values enables distributed request correlation & tracing.  ### Rate limiting  GET calls to this API are rate limited.   This rate limit is configured per client. You can request a higher rate limit if needed.  The rate limit uses a token bucket that is refilled within a fixed timeframe.   Each request can use multiple tokens, depending on the number of items requested.  Information about your current limit is conveyed via the response headers of each response:  | Header                | Description                                                                                                    | Example                | |-----------------------|----------------------------------------------------------------------------------------------------------------|------------------------| | X-RateLimit-Reset     | The time at which the rate limit will reset                                                                    | 2025-07-14T15:23:45Z   | | X-RateLimit-Limit     | The maximum number of tokens to be used in the current time window                                             | 2000                   | | X-RateLimit-Remaining | The number of tokens remaining in the current time window                                                      | 670                    | | Retry-After           | Indicates how many seconds the client should wait before making a new request (only when response code is 429) | 42                     |  ### Contact
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: iom@groepen.vlaanderen.be
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * InstantieApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InstantieApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'archiveInstantie' => [
            'application/json',
        ],
        'createOrUpdateInstantie' => [
            'application/ld+json',
            'application/json',
        ],
        'dearchiveInstantie' => [
            'application/json',
        ],
        'exportInstanties' => [
            'application/json',
        ],
        'exportInstantiesFilterByDate' => [
            'application/json',
        ],
        'findInstantieByIdOrProductnummer' => [
            'application/json',
        ],
        'findInstantieByIdOrProductnummerRedirect' => [
            'application/json',
        ],
        'findInstantiePage' => [
            'application/json',
        ],
        'findInstantiesByIdsOrProductnummers' => [
            'application/json',
        ],
        'getInstantieDelta' => [
            'application/json',
        ],
        'redirectToFindInstantiePage' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation archiveInstantie
     *
     * Archive the instantie based on instantie-id or instantieIdOrProductnummer.
     *
     * @param  string $id_or_productnummer Pass the instantie-id or instantieIdOrProductnummer for the instantie to archive (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['archiveInstantie'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function archiveInstantie($id_or_productnummer, string $contentType = self::contentTypes['archiveInstantie'][0])
    {
        $this->archiveInstantieWithHttpInfo($id_or_productnummer, $contentType);
    }

    /**
     * Operation archiveInstantieWithHttpInfo
     *
     * Archive the instantie based on instantie-id or instantieIdOrProductnummer.
     *
     * @param  string $id_or_productnummer Pass the instantie-id or instantieIdOrProductnummer for the instantie to archive (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['archiveInstantie'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function archiveInstantieWithHttpInfo($id_or_productnummer, string $contentType = self::contentTypes['archiveInstantie'][0])
    {
        $request = $this->archiveInstantieRequest($id_or_productnummer, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation archiveInstantieAsync
     *
     * Archive the instantie based on instantie-id or instantieIdOrProductnummer.
     *
     * @param  string $id_or_productnummer Pass the instantie-id or instantieIdOrProductnummer for the instantie to archive (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['archiveInstantie'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function archiveInstantieAsync($id_or_productnummer, string $contentType = self::contentTypes['archiveInstantie'][0])
    {
        return $this->archiveInstantieAsyncWithHttpInfo($id_or_productnummer, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation archiveInstantieAsyncWithHttpInfo
     *
     * Archive the instantie based on instantie-id or instantieIdOrProductnummer.
     *
     * @param  string $id_or_productnummer Pass the instantie-id or instantieIdOrProductnummer for the instantie to archive (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['archiveInstantie'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function archiveInstantieAsyncWithHttpInfo($id_or_productnummer, string $contentType = self::contentTypes['archiveInstantie'][0])
    {
        $returnType = '';
        $request = $this->archiveInstantieRequest($id_or_productnummer, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'archiveInstantie'
     *
     * @param  string $id_or_productnummer Pass the instantie-id or instantieIdOrProductnummer for the instantie to archive (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['archiveInstantie'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function archiveInstantieRequest($id_or_productnummer, string $contentType = self::contentTypes['archiveInstantie'][0])
    {

        // verify the required parameter 'id_or_productnummer' is set
        if ($id_or_productnummer === null || (is_array($id_or_productnummer) && count($id_or_productnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_or_productnummer when calling archiveInstantie'
            );
        }


        $resourcePath = '/doc/instantie/{idOrProductnummer}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id_or_productnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'idOrProductnummer' . '}',
                ObjectSerializer::toPathValue($id_or_productnummer),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/ld+json', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createOrUpdateInstantie
     *
     * Create a new instantie or (if id/instantieIdOrProductnummer in body) update an instantie.
     *
     * @param  \OpenAPI\Client\Model\UpsertInstantieJson $upsert_instantie_json upsert_instantie_json (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrUpdateInstantie'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonLdWrappedJsonInstantieJson|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function createOrUpdateInstantie($upsert_instantie_json, string $contentType = self::contentTypes['createOrUpdateInstantie'][0])
    {
        list($response) = $this->createOrUpdateInstantieWithHttpInfo($upsert_instantie_json, $contentType);
        return $response;
    }

    /**
     * Operation createOrUpdateInstantieWithHttpInfo
     *
     * Create a new instantie or (if id/instantieIdOrProductnummer in body) update an instantie.
     *
     * @param  \OpenAPI\Client\Model\UpsertInstantieJson $upsert_instantie_json (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrUpdateInstantie'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonLdWrappedJsonInstantieJson|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrUpdateInstantieWithHttpInfo($upsert_instantie_json, string $contentType = self::contentTypes['createOrUpdateInstantie'][0])
    {
        $request = $this->createOrUpdateInstantieRequest($upsert_instantie_json, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\JsonLdWrappedJsonInstantieJson',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\JsonLdWrappedJsonInstantieJson',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonLdWrappedJsonInstantieJson',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createOrUpdateInstantieAsync
     *
     * Create a new instantie or (if id/instantieIdOrProductnummer in body) update an instantie.
     *
     * @param  \OpenAPI\Client\Model\UpsertInstantieJson $upsert_instantie_json (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrUpdateInstantie'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrUpdateInstantieAsync($upsert_instantie_json, string $contentType = self::contentTypes['createOrUpdateInstantie'][0])
    {
        return $this->createOrUpdateInstantieAsyncWithHttpInfo($upsert_instantie_json, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrUpdateInstantieAsyncWithHttpInfo
     *
     * Create a new instantie or (if id/instantieIdOrProductnummer in body) update an instantie.
     *
     * @param  \OpenAPI\Client\Model\UpsertInstantieJson $upsert_instantie_json (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrUpdateInstantie'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrUpdateInstantieAsyncWithHttpInfo($upsert_instantie_json, string $contentType = self::contentTypes['createOrUpdateInstantie'][0])
    {
        $returnType = '\OpenAPI\Client\Model\JsonLdWrappedJsonInstantieJson';
        $request = $this->createOrUpdateInstantieRequest($upsert_instantie_json, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrUpdateInstantie'
     *
     * @param  \OpenAPI\Client\Model\UpsertInstantieJson $upsert_instantie_json (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrUpdateInstantie'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createOrUpdateInstantieRequest($upsert_instantie_json, string $contentType = self::contentTypes['createOrUpdateInstantie'][0])
    {

        // verify the required parameter 'upsert_instantie_json' is set
        if ($upsert_instantie_json === null || (is_array($upsert_instantie_json) && count($upsert_instantie_json) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $upsert_instantie_json when calling createOrUpdateInstantie'
            );
        }


        $resourcePath = '/doc/instantie';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/ld+json', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($upsert_instantie_json)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($upsert_instantie_json));
            } else {
                $httpBody = $upsert_instantie_json;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dearchiveInstantie
     *
     * Dearchive the instantie based on instantie-id or instantieIdOrProductnummer.
     *
     * @param  string $id_or_productnummer Pass the instantie-id or instantieIdOrProductnummer for the instantie to dearchive (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dearchiveInstantie'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function dearchiveInstantie($id_or_productnummer, string $contentType = self::contentTypes['dearchiveInstantie'][0])
    {
        $this->dearchiveInstantieWithHttpInfo($id_or_productnummer, $contentType);
    }

    /**
     * Operation dearchiveInstantieWithHttpInfo
     *
     * Dearchive the instantie based on instantie-id or instantieIdOrProductnummer.
     *
     * @param  string $id_or_productnummer Pass the instantie-id or instantieIdOrProductnummer for the instantie to dearchive (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dearchiveInstantie'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function dearchiveInstantieWithHttpInfo($id_or_productnummer, string $contentType = self::contentTypes['dearchiveInstantie'][0])
    {
        $request = $this->dearchiveInstantieRequest($id_or_productnummer, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation dearchiveInstantieAsync
     *
     * Dearchive the instantie based on instantie-id or instantieIdOrProductnummer.
     *
     * @param  string $id_or_productnummer Pass the instantie-id or instantieIdOrProductnummer for the instantie to dearchive (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dearchiveInstantie'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dearchiveInstantieAsync($id_or_productnummer, string $contentType = self::contentTypes['dearchiveInstantie'][0])
    {
        return $this->dearchiveInstantieAsyncWithHttpInfo($id_or_productnummer, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dearchiveInstantieAsyncWithHttpInfo
     *
     * Dearchive the instantie based on instantie-id or instantieIdOrProductnummer.
     *
     * @param  string $id_or_productnummer Pass the instantie-id or instantieIdOrProductnummer for the instantie to dearchive (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dearchiveInstantie'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dearchiveInstantieAsyncWithHttpInfo($id_or_productnummer, string $contentType = self::contentTypes['dearchiveInstantie'][0])
    {
        $returnType = '';
        $request = $this->dearchiveInstantieRequest($id_or_productnummer, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dearchiveInstantie'
     *
     * @param  string $id_or_productnummer Pass the instantie-id or instantieIdOrProductnummer for the instantie to dearchive (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dearchiveInstantie'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dearchiveInstantieRequest($id_or_productnummer, string $contentType = self::contentTypes['dearchiveInstantie'][0])
    {

        // verify the required parameter 'id_or_productnummer' is set
        if ($id_or_productnummer === null || (is_array($id_or_productnummer) && count($id_or_productnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_or_productnummer when calling dearchiveInstantie'
            );
        }


        $resourcePath = '/doc/instantie/{idOrProductnummer}/dearchive';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id_or_productnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'idOrProductnummer' . '}',
                ObjectSerializer::toPathValue($id_or_productnummer),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/ld+json', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation exportInstanties
     *
     * Fetch instanties page to export. Filter by using requestparams.
     *
     * @param  int|null $page_index Specifies the page the API needs to return. Default 0 (first page) (optional)
     * @param  int|null $limit Specifies the amount of instances on one page. (optional)
     * @param  \DateTime|null $laatst_ontvangen_vanaf If specified, the API will only return instances that have been received from the given timestamp. Using the ISO specification (yyyy-MM-ddThh:mm:ssZ) (optional)
     * @param  string[]|null $bevoegd_bestuursniveaus If specified, the API will only return instances with the given bevoegdBestuursniveau. E.g. Europees. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $geografische_toepassingsgebieden If specified, the API will only return instances for the given geografische gebieden and/or zip code (List). E.g. BE25838016, 1000(zip code). Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  bool|null $include_parent_geografische_toepassingsgebieden If specified, the API will not only return instances for the given geografische gebieden (List). E.g. BE25838016, but also instances of parent gebieden. E.g. BE258 and BE23, BE2, BE (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportInstanties'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\HydraCollectionJsonLdWrappedJsonInstantieJson|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function exportInstanties($page_index = null, $limit = null, $laatst_ontvangen_vanaf = null, $bevoegd_bestuursniveaus = null, $geografische_toepassingsgebieden = null, $include_parent_geografische_toepassingsgebieden = null, string $contentType = self::contentTypes['exportInstanties'][0])
    {
        list($response) = $this->exportInstantiesWithHttpInfo($page_index, $limit, $laatst_ontvangen_vanaf, $bevoegd_bestuursniveaus, $geografische_toepassingsgebieden, $include_parent_geografische_toepassingsgebieden, $contentType);
        return $response;
    }

    /**
     * Operation exportInstantiesWithHttpInfo
     *
     * Fetch instanties page to export. Filter by using requestparams.
     *
     * @param  int|null $page_index Specifies the page the API needs to return. Default 0 (first page) (optional)
     * @param  int|null $limit Specifies the amount of instances on one page. (optional)
     * @param  \DateTime|null $laatst_ontvangen_vanaf If specified, the API will only return instances that have been received from the given timestamp. Using the ISO specification (yyyy-MM-ddThh:mm:ssZ) (optional)
     * @param  string[]|null $bevoegd_bestuursniveaus If specified, the API will only return instances with the given bevoegdBestuursniveau. E.g. Europees. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $geografische_toepassingsgebieden If specified, the API will only return instances for the given geografische gebieden and/or zip code (List). E.g. BE25838016, 1000(zip code). Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  bool|null $include_parent_geografische_toepassingsgebieden If specified, the API will not only return instances for the given geografische gebieden (List). E.g. BE25838016, but also instances of parent gebieden. E.g. BE258 and BE23, BE2, BE (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportInstanties'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\HydraCollectionJsonLdWrappedJsonInstantieJson|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportInstantiesWithHttpInfo($page_index = null, $limit = null, $laatst_ontvangen_vanaf = null, $bevoegd_bestuursniveaus = null, $geografische_toepassingsgebieden = null, $include_parent_geografische_toepassingsgebieden = null, string $contentType = self::contentTypes['exportInstanties'][0])
    {
        $request = $this->exportInstantiesRequest($page_index, $limit, $laatst_ontvangen_vanaf, $bevoegd_bestuursniveaus, $geografische_toepassingsgebieden, $include_parent_geografische_toepassingsgebieden, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\HydraCollectionJsonLdWrappedJsonInstantieJson',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\HydraCollectionJsonLdWrappedJsonInstantieJson',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HydraCollectionJsonLdWrappedJsonInstantieJson',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation exportInstantiesAsync
     *
     * Fetch instanties page to export. Filter by using requestparams.
     *
     * @param  int|null $page_index Specifies the page the API needs to return. Default 0 (first page) (optional)
     * @param  int|null $limit Specifies the amount of instances on one page. (optional)
     * @param  \DateTime|null $laatst_ontvangen_vanaf If specified, the API will only return instances that have been received from the given timestamp. Using the ISO specification (yyyy-MM-ddThh:mm:ssZ) (optional)
     * @param  string[]|null $bevoegd_bestuursniveaus If specified, the API will only return instances with the given bevoegdBestuursniveau. E.g. Europees. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $geografische_toepassingsgebieden If specified, the API will only return instances for the given geografische gebieden and/or zip code (List). E.g. BE25838016, 1000(zip code). Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  bool|null $include_parent_geografische_toepassingsgebieden If specified, the API will not only return instances for the given geografische gebieden (List). E.g. BE25838016, but also instances of parent gebieden. E.g. BE258 and BE23, BE2, BE (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportInstanties'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportInstantiesAsync($page_index = null, $limit = null, $laatst_ontvangen_vanaf = null, $bevoegd_bestuursniveaus = null, $geografische_toepassingsgebieden = null, $include_parent_geografische_toepassingsgebieden = null, string $contentType = self::contentTypes['exportInstanties'][0])
    {
        return $this->exportInstantiesAsyncWithHttpInfo($page_index, $limit, $laatst_ontvangen_vanaf, $bevoegd_bestuursniveaus, $geografische_toepassingsgebieden, $include_parent_geografische_toepassingsgebieden, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportInstantiesAsyncWithHttpInfo
     *
     * Fetch instanties page to export. Filter by using requestparams.
     *
     * @param  int|null $page_index Specifies the page the API needs to return. Default 0 (first page) (optional)
     * @param  int|null $limit Specifies the amount of instances on one page. (optional)
     * @param  \DateTime|null $laatst_ontvangen_vanaf If specified, the API will only return instances that have been received from the given timestamp. Using the ISO specification (yyyy-MM-ddThh:mm:ssZ) (optional)
     * @param  string[]|null $bevoegd_bestuursniveaus If specified, the API will only return instances with the given bevoegdBestuursniveau. E.g. Europees. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $geografische_toepassingsgebieden If specified, the API will only return instances for the given geografische gebieden and/or zip code (List). E.g. BE25838016, 1000(zip code). Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  bool|null $include_parent_geografische_toepassingsgebieden If specified, the API will not only return instances for the given geografische gebieden (List). E.g. BE25838016, but also instances of parent gebieden. E.g. BE258 and BE23, BE2, BE (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportInstanties'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportInstantiesAsyncWithHttpInfo($page_index = null, $limit = null, $laatst_ontvangen_vanaf = null, $bevoegd_bestuursniveaus = null, $geografische_toepassingsgebieden = null, $include_parent_geografische_toepassingsgebieden = null, string $contentType = self::contentTypes['exportInstanties'][0])
    {
        $returnType = '\OpenAPI\Client\Model\HydraCollectionJsonLdWrappedJsonInstantieJson';
        $request = $this->exportInstantiesRequest($page_index, $limit, $laatst_ontvangen_vanaf, $bevoegd_bestuursniveaus, $geografische_toepassingsgebieden, $include_parent_geografische_toepassingsgebieden, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportInstanties'
     *
     * @param  int|null $page_index Specifies the page the API needs to return. Default 0 (first page) (optional)
     * @param  int|null $limit Specifies the amount of instances on one page. (optional)
     * @param  \DateTime|null $laatst_ontvangen_vanaf If specified, the API will only return instances that have been received from the given timestamp. Using the ISO specification (yyyy-MM-ddThh:mm:ssZ) (optional)
     * @param  string[]|null $bevoegd_bestuursniveaus If specified, the API will only return instances with the given bevoegdBestuursniveau. E.g. Europees. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $geografische_toepassingsgebieden If specified, the API will only return instances for the given geografische gebieden and/or zip code (List). E.g. BE25838016, 1000(zip code). Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  bool|null $include_parent_geografische_toepassingsgebieden If specified, the API will not only return instances for the given geografische gebieden (List). E.g. BE25838016, but also instances of parent gebieden. E.g. BE258 and BE23, BE2, BE (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportInstanties'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function exportInstantiesRequest($page_index = null, $limit = null, $laatst_ontvangen_vanaf = null, $bevoegd_bestuursniveaus = null, $geografische_toepassingsgebieden = null, $include_parent_geografische_toepassingsgebieden = null, string $contentType = self::contentTypes['exportInstanties'][0])
    {








        $resourcePath = '/doc/instantie/export';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_index,
            'pageIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $laatst_ontvangen_vanaf,
            'laatstOntvangenVanaf', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bevoegd_bestuursniveaus,
            'bevoegdBestuursniveaus', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $geografische_toepassingsgebieden,
            'geografischeToepassingsgebieden', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_parent_geografische_toepassingsgebieden,
            'includeParentGeografischeToepassingsgebieden', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/ld+json', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation exportInstantiesFilterByDate
     *
     * Fetch instanties page to export. Filter by laatstOntvangen in requestParams.
     *
     * @param  int|null $page_index Specifies the page the API needs to return. Default 0 (first page) (optional)
     * @param  int|null $limit Specifies the amount of instances on one page. (optional)
     * @param  \DateTime|null $laatst_ontvangen_vanaf If specified, the API will only return instances that have been received from the given timestamp. Using the ISO specification (yyyy-MM-ddThh:mm:ssZ) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportInstantiesFilterByDate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\HydraCollectionJsonLdWrappedJsonInstantieJson|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function exportInstantiesFilterByDate($page_index = null, $limit = null, $laatst_ontvangen_vanaf = null, string $contentType = self::contentTypes['exportInstantiesFilterByDate'][0])
    {
        list($response) = $this->exportInstantiesFilterByDateWithHttpInfo($page_index, $limit, $laatst_ontvangen_vanaf, $contentType);
        return $response;
    }

    /**
     * Operation exportInstantiesFilterByDateWithHttpInfo
     *
     * Fetch instanties page to export. Filter by laatstOntvangen in requestParams.
     *
     * @param  int|null $page_index Specifies the page the API needs to return. Default 0 (first page) (optional)
     * @param  int|null $limit Specifies the amount of instances on one page. (optional)
     * @param  \DateTime|null $laatst_ontvangen_vanaf If specified, the API will only return instances that have been received from the given timestamp. Using the ISO specification (yyyy-MM-ddThh:mm:ssZ) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportInstantiesFilterByDate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\HydraCollectionJsonLdWrappedJsonInstantieJson|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportInstantiesFilterByDateWithHttpInfo($page_index = null, $limit = null, $laatst_ontvangen_vanaf = null, string $contentType = self::contentTypes['exportInstantiesFilterByDate'][0])
    {
        $request = $this->exportInstantiesFilterByDateRequest($page_index, $limit, $laatst_ontvangen_vanaf, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\HydraCollectionJsonLdWrappedJsonInstantieJson',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\HydraCollectionJsonLdWrappedJsonInstantieJson',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HydraCollectionJsonLdWrappedJsonInstantieJson',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation exportInstantiesFilterByDateAsync
     *
     * Fetch instanties page to export. Filter by laatstOntvangen in requestParams.
     *
     * @param  int|null $page_index Specifies the page the API needs to return. Default 0 (first page) (optional)
     * @param  int|null $limit Specifies the amount of instances on one page. (optional)
     * @param  \DateTime|null $laatst_ontvangen_vanaf If specified, the API will only return instances that have been received from the given timestamp. Using the ISO specification (yyyy-MM-ddThh:mm:ssZ) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportInstantiesFilterByDate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportInstantiesFilterByDateAsync($page_index = null, $limit = null, $laatst_ontvangen_vanaf = null, string $contentType = self::contentTypes['exportInstantiesFilterByDate'][0])
    {
        return $this->exportInstantiesFilterByDateAsyncWithHttpInfo($page_index, $limit, $laatst_ontvangen_vanaf, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportInstantiesFilterByDateAsyncWithHttpInfo
     *
     * Fetch instanties page to export. Filter by laatstOntvangen in requestParams.
     *
     * @param  int|null $page_index Specifies the page the API needs to return. Default 0 (first page) (optional)
     * @param  int|null $limit Specifies the amount of instances on one page. (optional)
     * @param  \DateTime|null $laatst_ontvangen_vanaf If specified, the API will only return instances that have been received from the given timestamp. Using the ISO specification (yyyy-MM-ddThh:mm:ssZ) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportInstantiesFilterByDate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportInstantiesFilterByDateAsyncWithHttpInfo($page_index = null, $limit = null, $laatst_ontvangen_vanaf = null, string $contentType = self::contentTypes['exportInstantiesFilterByDate'][0])
    {
        $returnType = '\OpenAPI\Client\Model\HydraCollectionJsonLdWrappedJsonInstantieJson';
        $request = $this->exportInstantiesFilterByDateRequest($page_index, $limit, $laatst_ontvangen_vanaf, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportInstantiesFilterByDate'
     *
     * @param  int|null $page_index Specifies the page the API needs to return. Default 0 (first page) (optional)
     * @param  int|null $limit Specifies the amount of instances on one page. (optional)
     * @param  \DateTime|null $laatst_ontvangen_vanaf If specified, the API will only return instances that have been received from the given timestamp. Using the ISO specification (yyyy-MM-ddThh:mm:ssZ) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportInstantiesFilterByDate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function exportInstantiesFilterByDateRequest($page_index = null, $limit = null, $laatst_ontvangen_vanaf = null, string $contentType = self::contentTypes['exportInstantiesFilterByDate'][0])
    {





        $resourcePath = '/doc/instantie/export/byLaatstOntvangen';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_index,
            'pageIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $laatst_ontvangen_vanaf,
            'laatstOntvangenVanaf', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/ld+json', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findInstantieByIdOrProductnummer
     *
     * Fetch the details of the instantie.
     *
     * @param  string $id_or_productnummer Pass the instantie-id or the instantieIdOrProductnummer of the instantie to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findInstantieByIdOrProductnummer'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonLdWrappedJsonInstantieJson|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function findInstantieByIdOrProductnummer($id_or_productnummer, string $contentType = self::contentTypes['findInstantieByIdOrProductnummer'][0])
    {
        list($response) = $this->findInstantieByIdOrProductnummerWithHttpInfo($id_or_productnummer, $contentType);
        return $response;
    }

    /**
     * Operation findInstantieByIdOrProductnummerWithHttpInfo
     *
     * Fetch the details of the instantie.
     *
     * @param  string $id_or_productnummer Pass the instantie-id or the instantieIdOrProductnummer of the instantie to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findInstantieByIdOrProductnummer'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonLdWrappedJsonInstantieJson|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function findInstantieByIdOrProductnummerWithHttpInfo($id_or_productnummer, string $contentType = self::contentTypes['findInstantieByIdOrProductnummer'][0])
    {
        $request = $this->findInstantieByIdOrProductnummerRequest($id_or_productnummer, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\JsonLdWrappedJsonInstantieJson',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\JsonLdWrappedJsonInstantieJson',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonLdWrappedJsonInstantieJson',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findInstantieByIdOrProductnummerAsync
     *
     * Fetch the details of the instantie.
     *
     * @param  string $id_or_productnummer Pass the instantie-id or the instantieIdOrProductnummer of the instantie to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findInstantieByIdOrProductnummer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findInstantieByIdOrProductnummerAsync($id_or_productnummer, string $contentType = self::contentTypes['findInstantieByIdOrProductnummer'][0])
    {
        return $this->findInstantieByIdOrProductnummerAsyncWithHttpInfo($id_or_productnummer, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findInstantieByIdOrProductnummerAsyncWithHttpInfo
     *
     * Fetch the details of the instantie.
     *
     * @param  string $id_or_productnummer Pass the instantie-id or the instantieIdOrProductnummer of the instantie to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findInstantieByIdOrProductnummer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findInstantieByIdOrProductnummerAsyncWithHttpInfo($id_or_productnummer, string $contentType = self::contentTypes['findInstantieByIdOrProductnummer'][0])
    {
        $returnType = '\OpenAPI\Client\Model\JsonLdWrappedJsonInstantieJson';
        $request = $this->findInstantieByIdOrProductnummerRequest($id_or_productnummer, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findInstantieByIdOrProductnummer'
     *
     * @param  string $id_or_productnummer Pass the instantie-id or the instantieIdOrProductnummer of the instantie to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findInstantieByIdOrProductnummer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findInstantieByIdOrProductnummerRequest($id_or_productnummer, string $contentType = self::contentTypes['findInstantieByIdOrProductnummer'][0])
    {

        // verify the required parameter 'id_or_productnummer' is set
        if ($id_or_productnummer === null || (is_array($id_or_productnummer) && count($id_or_productnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_or_productnummer when calling findInstantieByIdOrProductnummer'
            );
        }


        $resourcePath = '/doc/instantie/{idOrProductnummer}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id_or_productnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'idOrProductnummer' . '}',
                ObjectSerializer::toPathValue($id_or_productnummer),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/ld+json', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findInstantieByIdOrProductnummerRedirect
     *
     * Fetch the details of the instantie. Redirects to /doc/instantie/{idOrProductnummer}.
     *
     * @param  string $id_or_productnummer Pass the instantie-id or the productnummer of the instantie to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findInstantieByIdOrProductnummerRedirect'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function findInstantieByIdOrProductnummerRedirect($id_or_productnummer, string $contentType = self::contentTypes['findInstantieByIdOrProductnummerRedirect'][0])
    {
        $this->findInstantieByIdOrProductnummerRedirectWithHttpInfo($id_or_productnummer, $contentType);
    }

    /**
     * Operation findInstantieByIdOrProductnummerRedirectWithHttpInfo
     *
     * Fetch the details of the instantie. Redirects to /doc/instantie/{idOrProductnummer}.
     *
     * @param  string $id_or_productnummer Pass the instantie-id or the productnummer of the instantie to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findInstantieByIdOrProductnummerRedirect'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function findInstantieByIdOrProductnummerRedirectWithHttpInfo($id_or_productnummer, string $contentType = self::contentTypes['findInstantieByIdOrProductnummerRedirect'][0])
    {
        $request = $this->findInstantieByIdOrProductnummerRedirectRequest($id_or_productnummer, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findInstantieByIdOrProductnummerRedirectAsync
     *
     * Fetch the details of the instantie. Redirects to /doc/instantie/{idOrProductnummer}.
     *
     * @param  string $id_or_productnummer Pass the instantie-id or the productnummer of the instantie to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findInstantieByIdOrProductnummerRedirect'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findInstantieByIdOrProductnummerRedirectAsync($id_or_productnummer, string $contentType = self::contentTypes['findInstantieByIdOrProductnummerRedirect'][0])
    {
        return $this->findInstantieByIdOrProductnummerRedirectAsyncWithHttpInfo($id_or_productnummer, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findInstantieByIdOrProductnummerRedirectAsyncWithHttpInfo
     *
     * Fetch the details of the instantie. Redirects to /doc/instantie/{idOrProductnummer}.
     *
     * @param  string $id_or_productnummer Pass the instantie-id or the productnummer of the instantie to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findInstantieByIdOrProductnummerRedirect'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findInstantieByIdOrProductnummerRedirectAsyncWithHttpInfo($id_or_productnummer, string $contentType = self::contentTypes['findInstantieByIdOrProductnummerRedirect'][0])
    {
        $returnType = '';
        $request = $this->findInstantieByIdOrProductnummerRedirectRequest($id_or_productnummer, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findInstantieByIdOrProductnummerRedirect'
     *
     * @param  string $id_or_productnummer Pass the instantie-id or the productnummer of the instantie to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findInstantieByIdOrProductnummerRedirect'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findInstantieByIdOrProductnummerRedirectRequest($id_or_productnummer, string $contentType = self::contentTypes['findInstantieByIdOrProductnummerRedirect'][0])
    {

        // verify the required parameter 'id_or_productnummer' is set
        if ($id_or_productnummer === null || (is_array($id_or_productnummer) && count($id_or_productnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_or_productnummer when calling findInstantieByIdOrProductnummerRedirect'
            );
        }


        $resourcePath = '/id/instantie/{idOrProductnummer}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id_or_productnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'idOrProductnummer' . '}',
                ObjectSerializer::toPathValue($id_or_productnummer),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findInstantiePage
     *
     * Fetch instantie page. Filter by using requestparams.
     *
     * @param  int|null $page_index Specifies the page the API needs to return. Default 0 (first page) (optional)
     * @param  int|null $limit Specifies the amount of instances on one page. (optional)
     * @param  string|null $sort_by On which property to sort (optional)
     * @param  string|null $concept If specified, the API will only return instances that are coupled with the specified conceptId (optional)
     * @param  string|null $vertaling If specified, the API will only return instances of that language (optional)
     * @param  string[]|null $geografische_toepassingsgebieden If specified, the API will only return instances for the given geografische gebieden and/or zip code (List). E.g. BE25838016, 1000(zip code). Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  bool|null $include_parent_geografische_toepassingsgebieden If specified, the API will not only return instances for the given geografische gebieden (List). E.g. BE25838016, but also instances of parent gebieden. E.g. BE258 and BE23, BE2, BE (optional)
     * @param  string|null $zoekterm If specified, the API will only return instances where the name and/or description and/or search terms matches the value of the zoekterm.  If the &#39;vertalingen&#39; queryparam is passed, we will only look for a match in instances for the specified language. (optional)
     * @param  string[]|null $uitvoerend_bestuursniveaus If specified, the API will only return instances with the given uitvoerendBestuursniveau. E.g. Vlaams. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $bevoegd_bestuursniveaus If specified, the API will only return instances with the given bevoegdBestuursniveau. E.g. Europees. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $doelgroepen If specified, the API will only return instances with the given doelgroep. E.g. Burger. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $themas If specified, the API will only return instances with the given thema. E.g. BurgerOverheid. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $types If specified, the API will only return instances with one of the given types. E.g. AdviesBegeleiding. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $publicatiekanalen If specified, the API will only return instances with the given publicatiekanalen. E.g. YourEurope. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $cases If specified, the API will only return instances with the given cases. E.g. Rechtenverkenner. (optional)
     * @param  bool|null $gearchiveerd If true, the API will also return instances that have been archived (optional)
     * @param  string|null $uitvoerende_organisatie If specified the result will only contain instances with the given uitvoerende organisatie (optional)
     * @param  string|null $sociale_kaart_organisatie If specified the result will only contain instances with the given sociale kaart organisatie (optional)
     * @param  \DateTime|null $eind_datum_vanaf If specified, the result wil only contain the instances having an end Date that is larger than the specified date, or has an empty end date. This Using the ISO specification ISO specification (yyyy-MM-ddThh:mm:ssZ). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findInstantiePage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\HydraCollectionJsonLdWrappedJsonInstantieJson|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function findInstantiePage($page_index = null, $limit = null, $sort_by = null, $concept = null, $vertaling = null, $geografische_toepassingsgebieden = null, $include_parent_geografische_toepassingsgebieden = null, $zoekterm = null, $uitvoerend_bestuursniveaus = null, $bevoegd_bestuursniveaus = null, $doelgroepen = null, $themas = null, $types = null, $publicatiekanalen = null, $cases = null, $gearchiveerd = null, $uitvoerende_organisatie = null, $sociale_kaart_organisatie = null, $eind_datum_vanaf = null, string $contentType = self::contentTypes['findInstantiePage'][0])
    {
        list($response) = $this->findInstantiePageWithHttpInfo($page_index, $limit, $sort_by, $concept, $vertaling, $geografische_toepassingsgebieden, $include_parent_geografische_toepassingsgebieden, $zoekterm, $uitvoerend_bestuursniveaus, $bevoegd_bestuursniveaus, $doelgroepen, $themas, $types, $publicatiekanalen, $cases, $gearchiveerd, $uitvoerende_organisatie, $sociale_kaart_organisatie, $eind_datum_vanaf, $contentType);
        return $response;
    }

    /**
     * Operation findInstantiePageWithHttpInfo
     *
     * Fetch instantie page. Filter by using requestparams.
     *
     * @param  int|null $page_index Specifies the page the API needs to return. Default 0 (first page) (optional)
     * @param  int|null $limit Specifies the amount of instances on one page. (optional)
     * @param  string|null $sort_by On which property to sort (optional)
     * @param  string|null $concept If specified, the API will only return instances that are coupled with the specified conceptId (optional)
     * @param  string|null $vertaling If specified, the API will only return instances of that language (optional)
     * @param  string[]|null $geografische_toepassingsgebieden If specified, the API will only return instances for the given geografische gebieden and/or zip code (List). E.g. BE25838016, 1000(zip code). Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  bool|null $include_parent_geografische_toepassingsgebieden If specified, the API will not only return instances for the given geografische gebieden (List). E.g. BE25838016, but also instances of parent gebieden. E.g. BE258 and BE23, BE2, BE (optional)
     * @param  string|null $zoekterm If specified, the API will only return instances where the name and/or description and/or search terms matches the value of the zoekterm.  If the &#39;vertalingen&#39; queryparam is passed, we will only look for a match in instances for the specified language. (optional)
     * @param  string[]|null $uitvoerend_bestuursniveaus If specified, the API will only return instances with the given uitvoerendBestuursniveau. E.g. Vlaams. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $bevoegd_bestuursniveaus If specified, the API will only return instances with the given bevoegdBestuursniveau. E.g. Europees. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $doelgroepen If specified, the API will only return instances with the given doelgroep. E.g. Burger. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $themas If specified, the API will only return instances with the given thema. E.g. BurgerOverheid. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $types If specified, the API will only return instances with one of the given types. E.g. AdviesBegeleiding. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $publicatiekanalen If specified, the API will only return instances with the given publicatiekanalen. E.g. YourEurope. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $cases If specified, the API will only return instances with the given cases. E.g. Rechtenverkenner. (optional)
     * @param  bool|null $gearchiveerd If true, the API will also return instances that have been archived (optional)
     * @param  string|null $uitvoerende_organisatie If specified the result will only contain instances with the given uitvoerende organisatie (optional)
     * @param  string|null $sociale_kaart_organisatie If specified the result will only contain instances with the given sociale kaart organisatie (optional)
     * @param  \DateTime|null $eind_datum_vanaf If specified, the result wil only contain the instances having an end Date that is larger than the specified date, or has an empty end date. This Using the ISO specification ISO specification (yyyy-MM-ddThh:mm:ssZ). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findInstantiePage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\HydraCollectionJsonLdWrappedJsonInstantieJson|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function findInstantiePageWithHttpInfo($page_index = null, $limit = null, $sort_by = null, $concept = null, $vertaling = null, $geografische_toepassingsgebieden = null, $include_parent_geografische_toepassingsgebieden = null, $zoekterm = null, $uitvoerend_bestuursniveaus = null, $bevoegd_bestuursniveaus = null, $doelgroepen = null, $themas = null, $types = null, $publicatiekanalen = null, $cases = null, $gearchiveerd = null, $uitvoerende_organisatie = null, $sociale_kaart_organisatie = null, $eind_datum_vanaf = null, string $contentType = self::contentTypes['findInstantiePage'][0])
    {
        $request = $this->findInstantiePageRequest($page_index, $limit, $sort_by, $concept, $vertaling, $geografische_toepassingsgebieden, $include_parent_geografische_toepassingsgebieden, $zoekterm, $uitvoerend_bestuursniveaus, $bevoegd_bestuursniveaus, $doelgroepen, $themas, $types, $publicatiekanalen, $cases, $gearchiveerd, $uitvoerende_organisatie, $sociale_kaart_organisatie, $eind_datum_vanaf, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\HydraCollectionJsonLdWrappedJsonInstantieJson',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\HydraCollectionJsonLdWrappedJsonInstantieJson',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HydraCollectionJsonLdWrappedJsonInstantieJson',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findInstantiePageAsync
     *
     * Fetch instantie page. Filter by using requestparams.
     *
     * @param  int|null $page_index Specifies the page the API needs to return. Default 0 (first page) (optional)
     * @param  int|null $limit Specifies the amount of instances on one page. (optional)
     * @param  string|null $sort_by On which property to sort (optional)
     * @param  string|null $concept If specified, the API will only return instances that are coupled with the specified conceptId (optional)
     * @param  string|null $vertaling If specified, the API will only return instances of that language (optional)
     * @param  string[]|null $geografische_toepassingsgebieden If specified, the API will only return instances for the given geografische gebieden and/or zip code (List). E.g. BE25838016, 1000(zip code). Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  bool|null $include_parent_geografische_toepassingsgebieden If specified, the API will not only return instances for the given geografische gebieden (List). E.g. BE25838016, but also instances of parent gebieden. E.g. BE258 and BE23, BE2, BE (optional)
     * @param  string|null $zoekterm If specified, the API will only return instances where the name and/or description and/or search terms matches the value of the zoekterm.  If the &#39;vertalingen&#39; queryparam is passed, we will only look for a match in instances for the specified language. (optional)
     * @param  string[]|null $uitvoerend_bestuursniveaus If specified, the API will only return instances with the given uitvoerendBestuursniveau. E.g. Vlaams. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $bevoegd_bestuursniveaus If specified, the API will only return instances with the given bevoegdBestuursniveau. E.g. Europees. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $doelgroepen If specified, the API will only return instances with the given doelgroep. E.g. Burger. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $themas If specified, the API will only return instances with the given thema. E.g. BurgerOverheid. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $types If specified, the API will only return instances with one of the given types. E.g. AdviesBegeleiding. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $publicatiekanalen If specified, the API will only return instances with the given publicatiekanalen. E.g. YourEurope. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $cases If specified, the API will only return instances with the given cases. E.g. Rechtenverkenner. (optional)
     * @param  bool|null $gearchiveerd If true, the API will also return instances that have been archived (optional)
     * @param  string|null $uitvoerende_organisatie If specified the result will only contain instances with the given uitvoerende organisatie (optional)
     * @param  string|null $sociale_kaart_organisatie If specified the result will only contain instances with the given sociale kaart organisatie (optional)
     * @param  \DateTime|null $eind_datum_vanaf If specified, the result wil only contain the instances having an end Date that is larger than the specified date, or has an empty end date. This Using the ISO specification ISO specification (yyyy-MM-ddThh:mm:ssZ). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findInstantiePage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findInstantiePageAsync($page_index = null, $limit = null, $sort_by = null, $concept = null, $vertaling = null, $geografische_toepassingsgebieden = null, $include_parent_geografische_toepassingsgebieden = null, $zoekterm = null, $uitvoerend_bestuursniveaus = null, $bevoegd_bestuursniveaus = null, $doelgroepen = null, $themas = null, $types = null, $publicatiekanalen = null, $cases = null, $gearchiveerd = null, $uitvoerende_organisatie = null, $sociale_kaart_organisatie = null, $eind_datum_vanaf = null, string $contentType = self::contentTypes['findInstantiePage'][0])
    {
        return $this->findInstantiePageAsyncWithHttpInfo($page_index, $limit, $sort_by, $concept, $vertaling, $geografische_toepassingsgebieden, $include_parent_geografische_toepassingsgebieden, $zoekterm, $uitvoerend_bestuursniveaus, $bevoegd_bestuursniveaus, $doelgroepen, $themas, $types, $publicatiekanalen, $cases, $gearchiveerd, $uitvoerende_organisatie, $sociale_kaart_organisatie, $eind_datum_vanaf, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findInstantiePageAsyncWithHttpInfo
     *
     * Fetch instantie page. Filter by using requestparams.
     *
     * @param  int|null $page_index Specifies the page the API needs to return. Default 0 (first page) (optional)
     * @param  int|null $limit Specifies the amount of instances on one page. (optional)
     * @param  string|null $sort_by On which property to sort (optional)
     * @param  string|null $concept If specified, the API will only return instances that are coupled with the specified conceptId (optional)
     * @param  string|null $vertaling If specified, the API will only return instances of that language (optional)
     * @param  string[]|null $geografische_toepassingsgebieden If specified, the API will only return instances for the given geografische gebieden and/or zip code (List). E.g. BE25838016, 1000(zip code). Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  bool|null $include_parent_geografische_toepassingsgebieden If specified, the API will not only return instances for the given geografische gebieden (List). E.g. BE25838016, but also instances of parent gebieden. E.g. BE258 and BE23, BE2, BE (optional)
     * @param  string|null $zoekterm If specified, the API will only return instances where the name and/or description and/or search terms matches the value of the zoekterm.  If the &#39;vertalingen&#39; queryparam is passed, we will only look for a match in instances for the specified language. (optional)
     * @param  string[]|null $uitvoerend_bestuursniveaus If specified, the API will only return instances with the given uitvoerendBestuursniveau. E.g. Vlaams. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $bevoegd_bestuursniveaus If specified, the API will only return instances with the given bevoegdBestuursniveau. E.g. Europees. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $doelgroepen If specified, the API will only return instances with the given doelgroep. E.g. Burger. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $themas If specified, the API will only return instances with the given thema. E.g. BurgerOverheid. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $types If specified, the API will only return instances with one of the given types. E.g. AdviesBegeleiding. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $publicatiekanalen If specified, the API will only return instances with the given publicatiekanalen. E.g. YourEurope. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $cases If specified, the API will only return instances with the given cases. E.g. Rechtenverkenner. (optional)
     * @param  bool|null $gearchiveerd If true, the API will also return instances that have been archived (optional)
     * @param  string|null $uitvoerende_organisatie If specified the result will only contain instances with the given uitvoerende organisatie (optional)
     * @param  string|null $sociale_kaart_organisatie If specified the result will only contain instances with the given sociale kaart organisatie (optional)
     * @param  \DateTime|null $eind_datum_vanaf If specified, the result wil only contain the instances having an end Date that is larger than the specified date, or has an empty end date. This Using the ISO specification ISO specification (yyyy-MM-ddThh:mm:ssZ). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findInstantiePage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findInstantiePageAsyncWithHttpInfo($page_index = null, $limit = null, $sort_by = null, $concept = null, $vertaling = null, $geografische_toepassingsgebieden = null, $include_parent_geografische_toepassingsgebieden = null, $zoekterm = null, $uitvoerend_bestuursniveaus = null, $bevoegd_bestuursniveaus = null, $doelgroepen = null, $themas = null, $types = null, $publicatiekanalen = null, $cases = null, $gearchiveerd = null, $uitvoerende_organisatie = null, $sociale_kaart_organisatie = null, $eind_datum_vanaf = null, string $contentType = self::contentTypes['findInstantiePage'][0])
    {
        $returnType = '\OpenAPI\Client\Model\HydraCollectionJsonLdWrappedJsonInstantieJson';
        $request = $this->findInstantiePageRequest($page_index, $limit, $sort_by, $concept, $vertaling, $geografische_toepassingsgebieden, $include_parent_geografische_toepassingsgebieden, $zoekterm, $uitvoerend_bestuursniveaus, $bevoegd_bestuursniveaus, $doelgroepen, $themas, $types, $publicatiekanalen, $cases, $gearchiveerd, $uitvoerende_organisatie, $sociale_kaart_organisatie, $eind_datum_vanaf, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findInstantiePage'
     *
     * @param  int|null $page_index Specifies the page the API needs to return. Default 0 (first page) (optional)
     * @param  int|null $limit Specifies the amount of instances on one page. (optional)
     * @param  string|null $sort_by On which property to sort (optional)
     * @param  string|null $concept If specified, the API will only return instances that are coupled with the specified conceptId (optional)
     * @param  string|null $vertaling If specified, the API will only return instances of that language (optional)
     * @param  string[]|null $geografische_toepassingsgebieden If specified, the API will only return instances for the given geografische gebieden and/or zip code (List). E.g. BE25838016, 1000(zip code). Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  bool|null $include_parent_geografische_toepassingsgebieden If specified, the API will not only return instances for the given geografische gebieden (List). E.g. BE25838016, but also instances of parent gebieden. E.g. BE258 and BE23, BE2, BE (optional)
     * @param  string|null $zoekterm If specified, the API will only return instances where the name and/or description and/or search terms matches the value of the zoekterm.  If the &#39;vertalingen&#39; queryparam is passed, we will only look for a match in instances for the specified language. (optional)
     * @param  string[]|null $uitvoerend_bestuursniveaus If specified, the API will only return instances with the given uitvoerendBestuursniveau. E.g. Vlaams. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $bevoegd_bestuursniveaus If specified, the API will only return instances with the given bevoegdBestuursniveau. E.g. Europees. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $doelgroepen If specified, the API will only return instances with the given doelgroep. E.g. Burger. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $themas If specified, the API will only return instances with the given thema. E.g. BurgerOverheid. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $types If specified, the API will only return instances with one of the given types. E.g. AdviesBegeleiding. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $publicatiekanalen If specified, the API will only return instances with the given publicatiekanalen. E.g. YourEurope. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $cases If specified, the API will only return instances with the given cases. E.g. Rechtenverkenner. (optional)
     * @param  bool|null $gearchiveerd If true, the API will also return instances that have been archived (optional)
     * @param  string|null $uitvoerende_organisatie If specified the result will only contain instances with the given uitvoerende organisatie (optional)
     * @param  string|null $sociale_kaart_organisatie If specified the result will only contain instances with the given sociale kaart organisatie (optional)
     * @param  \DateTime|null $eind_datum_vanaf If specified, the result wil only contain the instances having an end Date that is larger than the specified date, or has an empty end date. This Using the ISO specification ISO specification (yyyy-MM-ddThh:mm:ssZ). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findInstantiePage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findInstantiePageRequest($page_index = null, $limit = null, $sort_by = null, $concept = null, $vertaling = null, $geografische_toepassingsgebieden = null, $include_parent_geografische_toepassingsgebieden = null, $zoekterm = null, $uitvoerend_bestuursniveaus = null, $bevoegd_bestuursniveaus = null, $doelgroepen = null, $themas = null, $types = null, $publicatiekanalen = null, $cases = null, $gearchiveerd = null, $uitvoerende_organisatie = null, $sociale_kaart_organisatie = null, $eind_datum_vanaf = null, string $contentType = self::contentTypes['findInstantiePage'][0])
    {





















        $resourcePath = '/doc/instantie';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_index,
            'pageIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_by,
            'sortBy', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $concept,
            'concept', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $vertaling,
            'vertaling', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $geografische_toepassingsgebieden,
            'geografischeToepassingsgebieden', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_parent_geografische_toepassingsgebieden,
            'includeParentGeografischeToepassingsgebieden', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $zoekterm,
            'zoekterm', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $uitvoerend_bestuursniveaus,
            'uitvoerendBestuursniveaus', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bevoegd_bestuursniveaus,
            'bevoegdBestuursniveaus', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $doelgroepen,
            'doelgroepen', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $themas,
            'themas', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $types,
            'types', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $publicatiekanalen,
            'publicatiekanalen', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cases,
            'cases', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $gearchiveerd,
            'gearchiveerd', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $uitvoerende_organisatie,
            'uitvoerendeOrganisatie', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sociale_kaart_organisatie,
            'socialeKaartOrganisatie', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $eind_datum_vanaf,
            'eindDatumVanaf', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/ld+json', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findInstantiesByIdsOrProductnummers
     *
     * Fetch the details of the instanties.
     *
     * @param  string $ids Pass the instantie-ids or productnummers of the instanties to fetch. This should be encoded as a comma-separated list. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findInstantiesByIdsOrProductnummers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonLdWrappedJsonInstantieJson[]|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function findInstantiesByIdsOrProductnummers($ids, string $contentType = self::contentTypes['findInstantiesByIdsOrProductnummers'][0])
    {
        list($response) = $this->findInstantiesByIdsOrProductnummersWithHttpInfo($ids, $contentType);
        return $response;
    }

    /**
     * Operation findInstantiesByIdsOrProductnummersWithHttpInfo
     *
     * Fetch the details of the instanties.
     *
     * @param  string $ids Pass the instantie-ids or productnummers of the instanties to fetch. This should be encoded as a comma-separated list. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findInstantiesByIdsOrProductnummers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonLdWrappedJsonInstantieJson[]|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function findInstantiesByIdsOrProductnummersWithHttpInfo($ids, string $contentType = self::contentTypes['findInstantiesByIdsOrProductnummers'][0])
    {
        $request = $this->findInstantiesByIdsOrProductnummersRequest($ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\JsonLdWrappedJsonInstantieJson[]',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\JsonLdWrappedJsonInstantieJson[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonLdWrappedJsonInstantieJson[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findInstantiesByIdsOrProductnummersAsync
     *
     * Fetch the details of the instanties.
     *
     * @param  string $ids Pass the instantie-ids or productnummers of the instanties to fetch. This should be encoded as a comma-separated list. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findInstantiesByIdsOrProductnummers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findInstantiesByIdsOrProductnummersAsync($ids, string $contentType = self::contentTypes['findInstantiesByIdsOrProductnummers'][0])
    {
        return $this->findInstantiesByIdsOrProductnummersAsyncWithHttpInfo($ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findInstantiesByIdsOrProductnummersAsyncWithHttpInfo
     *
     * Fetch the details of the instanties.
     *
     * @param  string $ids Pass the instantie-ids or productnummers of the instanties to fetch. This should be encoded as a comma-separated list. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findInstantiesByIdsOrProductnummers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findInstantiesByIdsOrProductnummersAsyncWithHttpInfo($ids, string $contentType = self::contentTypes['findInstantiesByIdsOrProductnummers'][0])
    {
        $returnType = '\OpenAPI\Client\Model\JsonLdWrappedJsonInstantieJson[]';
        $request = $this->findInstantiesByIdsOrProductnummersRequest($ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findInstantiesByIdsOrProductnummers'
     *
     * @param  string $ids Pass the instantie-ids or productnummers of the instanties to fetch. This should be encoded as a comma-separated list. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findInstantiesByIdsOrProductnummers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findInstantiesByIdsOrProductnummersRequest($ids, string $contentType = self::contentTypes['findInstantiesByIdsOrProductnummers'][0])
    {

        // verify the required parameter 'ids' is set
        if ($ids === null || (is_array($ids) && count($ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ids when calling findInstantiesByIdsOrProductnummers'
            );
        }


        $resourcePath = '/doc/instantie/byIds/{ids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ids !== null) {
            $resourcePath = str_replace(
                '{' . 'ids' . '}',
                ObjectSerializer::toPathValue($ids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/ld+json', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInstantieDelta
     *
     * @param  string $id_or_productnummer id_or_productnummer (required)
     * @param  string $from from (required)
     * @param  string $to to (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInstantieDelta'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InstantieDeltaJson|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function getInstantieDelta($id_or_productnummer, $from, $to, string $contentType = self::contentTypes['getInstantieDelta'][0])
    {
        list($response) = $this->getInstantieDeltaWithHttpInfo($id_or_productnummer, $from, $to, $contentType);
        return $response;
    }

    /**
     * Operation getInstantieDeltaWithHttpInfo
     *
     * @param  string $id_or_productnummer (required)
     * @param  string $from (required)
     * @param  string $to (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInstantieDelta'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InstantieDeltaJson|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInstantieDeltaWithHttpInfo($id_or_productnummer, $from, $to, string $contentType = self::contentTypes['getInstantieDelta'][0])
    {
        $request = $this->getInstantieDeltaRequest($id_or_productnummer, $from, $to, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InstantieDeltaJson',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InstantieDeltaJson',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InstantieDeltaJson',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getInstantieDeltaAsync
     *
     * @param  string $id_or_productnummer (required)
     * @param  string $from (required)
     * @param  string $to (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInstantieDelta'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInstantieDeltaAsync($id_or_productnummer, $from, $to, string $contentType = self::contentTypes['getInstantieDelta'][0])
    {
        return $this->getInstantieDeltaAsyncWithHttpInfo($id_or_productnummer, $from, $to, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInstantieDeltaAsyncWithHttpInfo
     *
     * @param  string $id_or_productnummer (required)
     * @param  string $from (required)
     * @param  string $to (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInstantieDelta'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInstantieDeltaAsyncWithHttpInfo($id_or_productnummer, $from, $to, string $contentType = self::contentTypes['getInstantieDelta'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InstantieDeltaJson';
        $request = $this->getInstantieDeltaRequest($id_or_productnummer, $from, $to, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInstantieDelta'
     *
     * @param  string $id_or_productnummer (required)
     * @param  string $from (required)
     * @param  string $to (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInstantieDelta'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInstantieDeltaRequest($id_or_productnummer, $from, $to, string $contentType = self::contentTypes['getInstantieDelta'][0])
    {

        // verify the required parameter 'id_or_productnummer' is set
        if ($id_or_productnummer === null || (is_array($id_or_productnummer) && count($id_or_productnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_or_productnummer when calling getInstantieDelta'
            );
        }

        // verify the required parameter 'from' is set
        if ($from === null || (is_array($from) && count($from) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from when calling getInstantieDelta'
            );
        }

        // verify the required parameter 'to' is set
        if ($to === null || (is_array($to) && count($to) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to when calling getInstantieDelta'
            );
        }


        $resourcePath = '/doc/instantie/{idOrProductnummer}/delta';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($id_or_productnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'idOrProductnummer' . '}',
                ObjectSerializer::toPathValue($id_or_productnummer),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/ld+json', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation redirectToFindInstantiePage
     *
     * Fetch the first instantie page. Redirects to /doc/instantie.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redirectToFindInstantiePage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function redirectToFindInstantiePage(string $contentType = self::contentTypes['redirectToFindInstantiePage'][0])
    {
        $this->redirectToFindInstantiePageWithHttpInfo($contentType);
    }

    /**
     * Operation redirectToFindInstantiePageWithHttpInfo
     *
     * Fetch the first instantie page. Redirects to /doc/instantie.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redirectToFindInstantiePage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function redirectToFindInstantiePageWithHttpInfo(string $contentType = self::contentTypes['redirectToFindInstantiePage'][0])
    {
        $request = $this->redirectToFindInstantiePageRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation redirectToFindInstantiePageAsync
     *
     * Fetch the first instantie page. Redirects to /doc/instantie.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redirectToFindInstantiePage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function redirectToFindInstantiePageAsync(string $contentType = self::contentTypes['redirectToFindInstantiePage'][0])
    {
        return $this->redirectToFindInstantiePageAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation redirectToFindInstantiePageAsyncWithHttpInfo
     *
     * Fetch the first instantie page. Redirects to /doc/instantie.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redirectToFindInstantiePage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function redirectToFindInstantiePageAsyncWithHttpInfo(string $contentType = self::contentTypes['redirectToFindInstantiePage'][0])
    {
        $returnType = '';
        $request = $this->redirectToFindInstantiePageRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'redirectToFindInstantiePage'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redirectToFindInstantiePage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function redirectToFindInstantiePageRequest(string $contentType = self::contentTypes['redirectToFindInstantiePage'][0])
    {


        $resourcePath = '/id/instantie';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
