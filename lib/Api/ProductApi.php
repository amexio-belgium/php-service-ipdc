<?php
/**
 * ProductApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Product API
 *
 * ### Access  The Product API is a public API. If you want to make use of this api, contact someone on the team to get an API key.  Each endpoint also lists the necessary permissions to call it. You can view your own permissions by calling the `/me` endpoint.   In a few cases some of the listed permissions are optional and depend upon the specific data requested.  ### Tracing  The API uses X-request-ID and X-correlation-ID headers.   Every request that hits the API without these headers, gets a new random UUID as request-ID and correlation-ID.  If you as a client pass these id's yourself, the API will use your values, but only when they are in UUID format.   If you provide a value that is not a UUID, the api will fail to handle your request.  Providing these values enables distributed request correlation & tracing.  ### Rate limiting  GET calls to this API are rate limited.   This rate limit is configured per client. You can request a higher rate limit if needed.  The rate limit uses a token bucket that is refilled within a fixed timeframe.   Each request can use multiple tokens, depending on the number of items requested.  Information about your current limit is conveyed via the response headers of each response:  | Header                | Description                                                                                                    | Example                | |-----------------------|----------------------------------------------------------------------------------------------------------------|------------------------| | X-RateLimit-Reset     | The time at which the rate limit will reset                                                                    | 2025-07-14T15:23:45Z   | | X-RateLimit-Limit     | The maximum number of tokens to be used in the current time window                                             | 2000                   | | X-RateLimit-Remaining | The number of tokens remaining in the current time window                                                      | 670                    | | Retry-After           | Indicates how many seconds the client should wait before making a new request (only when response code is 429) | 42                     |  ### Contact
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: iom@groepen.vlaanderen.be
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ProductApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProductApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'findProductByIdOrProductnummer' => [
            'application/json',
        ],
        'findProductPage' => [
            'application/json',
        ],
        'findProductenByIdsOrProductnummers' => [
            'application/json',
        ],
        'getProduct' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation findProductByIdOrProductnummer
     *
     * Fetch the details of a instantie or concept. Redirects to /doc/product/{idOrProductnummer}.
     *
     * @param  string $id_or_productnummer Pass the id or the productnummer of the product to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findProductByIdOrProductnummer'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function findProductByIdOrProductnummer($id_or_productnummer, string $contentType = self::contentTypes['findProductByIdOrProductnummer'][0])
    {
        $this->findProductByIdOrProductnummerWithHttpInfo($id_or_productnummer, $contentType);
    }

    /**
     * Operation findProductByIdOrProductnummerWithHttpInfo
     *
     * Fetch the details of a instantie or concept. Redirects to /doc/product/{idOrProductnummer}.
     *
     * @param  string $id_or_productnummer Pass the id or the productnummer of the product to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findProductByIdOrProductnummer'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function findProductByIdOrProductnummerWithHttpInfo($id_or_productnummer, string $contentType = self::contentTypes['findProductByIdOrProductnummer'][0])
    {
        $request = $this->findProductByIdOrProductnummerRequest($id_or_productnummer, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findProductByIdOrProductnummerAsync
     *
     * Fetch the details of a instantie or concept. Redirects to /doc/product/{idOrProductnummer}.
     *
     * @param  string $id_or_productnummer Pass the id or the productnummer of the product to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findProductByIdOrProductnummer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findProductByIdOrProductnummerAsync($id_or_productnummer, string $contentType = self::contentTypes['findProductByIdOrProductnummer'][0])
    {
        return $this->findProductByIdOrProductnummerAsyncWithHttpInfo($id_or_productnummer, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findProductByIdOrProductnummerAsyncWithHttpInfo
     *
     * Fetch the details of a instantie or concept. Redirects to /doc/product/{idOrProductnummer}.
     *
     * @param  string $id_or_productnummer Pass the id or the productnummer of the product to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findProductByIdOrProductnummer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findProductByIdOrProductnummerAsyncWithHttpInfo($id_or_productnummer, string $contentType = self::contentTypes['findProductByIdOrProductnummer'][0])
    {
        $returnType = '';
        $request = $this->findProductByIdOrProductnummerRequest($id_or_productnummer, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findProductByIdOrProductnummer'
     *
     * @param  string $id_or_productnummer Pass the id or the productnummer of the product to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findProductByIdOrProductnummer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findProductByIdOrProductnummerRequest($id_or_productnummer, string $contentType = self::contentTypes['findProductByIdOrProductnummer'][0])
    {

        // verify the required parameter 'id_or_productnummer' is set
        if ($id_or_productnummer === null || (is_array($id_or_productnummer) && count($id_or_productnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_or_productnummer when calling findProductByIdOrProductnummer'
            );
        }


        $resourcePath = '/id/product/{idOrProductnummer}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id_or_productnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'idOrProductnummer' . '}',
                ObjectSerializer::toPathValue($id_or_productnummer),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findProductPage
     *
     * Fetch product page. Filter by using requestparams.
     *
     * @param  int|null $page_index Specifies the page the API needs to return. Default 0 (first page) (optional)
     * @param  int|null $limit Specifies the amount of instances on one page. (optional)
     * @param  string|null $vertaling If specified, the API will only return instances of that language (optional)
     * @param  string|null $zoekterm If specified, the API will only return instances where the name and/or description and/or search terms matches the value of the zoekterm.  If the &#39;vertalingen&#39; queryparam is passed, we will only look for a match in instances for the specified language. (optional)
     * @param  bool|null $gearchiveerd If true, the API will also return concepts that have been archived (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findProductPage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\HydraCollectionProductJson|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function findProductPage($page_index = null, $limit = null, $vertaling = null, $zoekterm = null, $gearchiveerd = null, string $contentType = self::contentTypes['findProductPage'][0])
    {
        list($response) = $this->findProductPageWithHttpInfo($page_index, $limit, $vertaling, $zoekterm, $gearchiveerd, $contentType);
        return $response;
    }

    /**
     * Operation findProductPageWithHttpInfo
     *
     * Fetch product page. Filter by using requestparams.
     *
     * @param  int|null $page_index Specifies the page the API needs to return. Default 0 (first page) (optional)
     * @param  int|null $limit Specifies the amount of instances on one page. (optional)
     * @param  string|null $vertaling If specified, the API will only return instances of that language (optional)
     * @param  string|null $zoekterm If specified, the API will only return instances where the name and/or description and/or search terms matches the value of the zoekterm.  If the &#39;vertalingen&#39; queryparam is passed, we will only look for a match in instances for the specified language. (optional)
     * @param  bool|null $gearchiveerd If true, the API will also return concepts that have been archived (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findProductPage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\HydraCollectionProductJson|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function findProductPageWithHttpInfo($page_index = null, $limit = null, $vertaling = null, $zoekterm = null, $gearchiveerd = null, string $contentType = self::contentTypes['findProductPage'][0])
    {
        $request = $this->findProductPageRequest($page_index, $limit, $vertaling, $zoekterm, $gearchiveerd, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\HydraCollectionProductJson',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\HydraCollectionProductJson',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HydraCollectionProductJson',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findProductPageAsync
     *
     * Fetch product page. Filter by using requestparams.
     *
     * @param  int|null $page_index Specifies the page the API needs to return. Default 0 (first page) (optional)
     * @param  int|null $limit Specifies the amount of instances on one page. (optional)
     * @param  string|null $vertaling If specified, the API will only return instances of that language (optional)
     * @param  string|null $zoekterm If specified, the API will only return instances where the name and/or description and/or search terms matches the value of the zoekterm.  If the &#39;vertalingen&#39; queryparam is passed, we will only look for a match in instances for the specified language. (optional)
     * @param  bool|null $gearchiveerd If true, the API will also return concepts that have been archived (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findProductPage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findProductPageAsync($page_index = null, $limit = null, $vertaling = null, $zoekterm = null, $gearchiveerd = null, string $contentType = self::contentTypes['findProductPage'][0])
    {
        return $this->findProductPageAsyncWithHttpInfo($page_index, $limit, $vertaling, $zoekterm, $gearchiveerd, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findProductPageAsyncWithHttpInfo
     *
     * Fetch product page. Filter by using requestparams.
     *
     * @param  int|null $page_index Specifies the page the API needs to return. Default 0 (first page) (optional)
     * @param  int|null $limit Specifies the amount of instances on one page. (optional)
     * @param  string|null $vertaling If specified, the API will only return instances of that language (optional)
     * @param  string|null $zoekterm If specified, the API will only return instances where the name and/or description and/or search terms matches the value of the zoekterm.  If the &#39;vertalingen&#39; queryparam is passed, we will only look for a match in instances for the specified language. (optional)
     * @param  bool|null $gearchiveerd If true, the API will also return concepts that have been archived (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findProductPage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findProductPageAsyncWithHttpInfo($page_index = null, $limit = null, $vertaling = null, $zoekterm = null, $gearchiveerd = null, string $contentType = self::contentTypes['findProductPage'][0])
    {
        $returnType = '\OpenAPI\Client\Model\HydraCollectionProductJson';
        $request = $this->findProductPageRequest($page_index, $limit, $vertaling, $zoekterm, $gearchiveerd, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findProductPage'
     *
     * @param  int|null $page_index Specifies the page the API needs to return. Default 0 (first page) (optional)
     * @param  int|null $limit Specifies the amount of instances on one page. (optional)
     * @param  string|null $vertaling If specified, the API will only return instances of that language (optional)
     * @param  string|null $zoekterm If specified, the API will only return instances where the name and/or description and/or search terms matches the value of the zoekterm.  If the &#39;vertalingen&#39; queryparam is passed, we will only look for a match in instances for the specified language. (optional)
     * @param  bool|null $gearchiveerd If true, the API will also return concepts that have been archived (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findProductPage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findProductPageRequest($page_index = null, $limit = null, $vertaling = null, $zoekterm = null, $gearchiveerd = null, string $contentType = self::contentTypes['findProductPage'][0])
    {







        $resourcePath = '/doc/product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_index,
            'pageIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $vertaling,
            'vertaling', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $zoekterm,
            'zoekterm', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $gearchiveerd,
            'gearchiveerd', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/ld+json', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findProductenByIdsOrProductnummers
     *
     * Fetch the details of the producten.
     *
     * @param  string $ids Pass the product-ids or productnummers of the products to fetch. This should be encoded as a comma-separated list. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findProductenByIdsOrProductnummers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProductJson[]|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function findProductenByIdsOrProductnummers($ids, string $contentType = self::contentTypes['findProductenByIdsOrProductnummers'][0])
    {
        list($response) = $this->findProductenByIdsOrProductnummersWithHttpInfo($ids, $contentType);
        return $response;
    }

    /**
     * Operation findProductenByIdsOrProductnummersWithHttpInfo
     *
     * Fetch the details of the producten.
     *
     * @param  string $ids Pass the product-ids or productnummers of the products to fetch. This should be encoded as a comma-separated list. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findProductenByIdsOrProductnummers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProductJson[]|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function findProductenByIdsOrProductnummersWithHttpInfo($ids, string $contentType = self::contentTypes['findProductenByIdsOrProductnummers'][0])
    {
        $request = $this->findProductenByIdsOrProductnummersRequest($ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ProductJson[]',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ProductJson[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProductJson[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findProductenByIdsOrProductnummersAsync
     *
     * Fetch the details of the producten.
     *
     * @param  string $ids Pass the product-ids or productnummers of the products to fetch. This should be encoded as a comma-separated list. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findProductenByIdsOrProductnummers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findProductenByIdsOrProductnummersAsync($ids, string $contentType = self::contentTypes['findProductenByIdsOrProductnummers'][0])
    {
        return $this->findProductenByIdsOrProductnummersAsyncWithHttpInfo($ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findProductenByIdsOrProductnummersAsyncWithHttpInfo
     *
     * Fetch the details of the producten.
     *
     * @param  string $ids Pass the product-ids or productnummers of the products to fetch. This should be encoded as a comma-separated list. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findProductenByIdsOrProductnummers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findProductenByIdsOrProductnummersAsyncWithHttpInfo($ids, string $contentType = self::contentTypes['findProductenByIdsOrProductnummers'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProductJson[]';
        $request = $this->findProductenByIdsOrProductnummersRequest($ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findProductenByIdsOrProductnummers'
     *
     * @param  string $ids Pass the product-ids or productnummers of the products to fetch. This should be encoded as a comma-separated list. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findProductenByIdsOrProductnummers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findProductenByIdsOrProductnummersRequest($ids, string $contentType = self::contentTypes['findProductenByIdsOrProductnummers'][0])
    {

        // verify the required parameter 'ids' is set
        if ($ids === null || (is_array($ids) && count($ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ids when calling findProductenByIdsOrProductnummers'
            );
        }


        $resourcePath = '/doc/product/byIdsOrProductnummers/{ids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ids !== null) {
            $resourcePath = str_replace(
                '{' . 'ids' . '}',
                ObjectSerializer::toPathValue($ids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/ld+json', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProduct
     *
     * Fetch the details of a instantie or concept
     *
     * @param  string $id_or_productnummer Pass the id or the productnummer of the product to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProduct'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProductJson|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function getProduct($id_or_productnummer, string $contentType = self::contentTypes['getProduct'][0])
    {
        list($response) = $this->getProductWithHttpInfo($id_or_productnummer, $contentType);
        return $response;
    }

    /**
     * Operation getProductWithHttpInfo
     *
     * Fetch the details of a instantie or concept
     *
     * @param  string $id_or_productnummer Pass the id or the productnummer of the product to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProduct'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProductJson|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductWithHttpInfo($id_or_productnummer, string $contentType = self::contentTypes['getProduct'][0])
    {
        $request = $this->getProductRequest($id_or_productnummer, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ProductJson',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ProductJson',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProductJson',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getProductAsync
     *
     * Fetch the details of a instantie or concept
     *
     * @param  string $id_or_productnummer Pass the id or the productnummer of the product to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProduct'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductAsync($id_or_productnummer, string $contentType = self::contentTypes['getProduct'][0])
    {
        return $this->getProductAsyncWithHttpInfo($id_or_productnummer, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductAsyncWithHttpInfo
     *
     * Fetch the details of a instantie or concept
     *
     * @param  string $id_or_productnummer Pass the id or the productnummer of the product to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProduct'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductAsyncWithHttpInfo($id_or_productnummer, string $contentType = self::contentTypes['getProduct'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProductJson';
        $request = $this->getProductRequest($id_or_productnummer, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProduct'
     *
     * @param  string $id_or_productnummer Pass the id or the productnummer of the product to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProduct'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProductRequest($id_or_productnummer, string $contentType = self::contentTypes['getProduct'][0])
    {

        // verify the required parameter 'id_or_productnummer' is set
        if ($id_or_productnummer === null || (is_array($id_or_productnummer) && count($id_or_productnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_or_productnummer when calling getProduct'
            );
        }


        $resourcePath = '/doc/product/{idOrProductnummer}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id_or_productnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'idOrProductnummer' . '}',
                ObjectSerializer::toPathValue($id_or_productnummer),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/ld+json', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
