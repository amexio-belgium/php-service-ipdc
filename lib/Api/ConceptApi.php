<?php
/**
 * ConceptApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Product API
 *
 * ### Access  The Product API is a public API. If you want to make use of this api, contact someone on the team to get an API key.  Each endpoint also lists the necessary permissions to call it. You can view your own permissions by calling the `/me` endpoint.   In a few cases some of the listed permissions are optional and depend upon the specific data requested.  ### Tracing  The API uses X-request-ID and X-correlation-ID headers.   Every request that hits the API without these headers, gets a new random UUID as request-ID and correlation-ID.  If you as a client pass these id's yourself, the API will use your values, but only when they are in UUID format.   If you provide a value that is not a UUID, the api will fail to handle your request.  Providing these values enables distributed request correlation & tracing.  ### Rate limiting  GET calls to this API are rate limited.   This rate limit is configured per client. You can request a higher rate limit if needed.  The rate limit uses a token bucket that is refilled within a fixed timeframe.   Each request can use multiple tokens, depending on the number of items requested.  Information about your current limit is conveyed via the response headers of each response:  | Header                | Description                                                                                                    | Example                | |-----------------------|----------------------------------------------------------------------------------------------------------------|------------------------| | X-RateLimit-Reset     | The time at which the rate limit will reset                                                                    | 2025-07-14T15:23:45Z   | | X-RateLimit-Limit     | The maximum number of tokens to be used in the current time window                                             | 2000                   | | X-RateLimit-Remaining | The number of tokens remaining in the current time window                                                      | 670                    | | Retry-After           | Indicates how many seconds the client should wait before making a new request (only when response code is 429) | 42                     |  ### Contact
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: iom@groepen.vlaanderen.be
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ConceptApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ConceptApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'archiveConcept' => [
            'application/json',
        ],
        'createOrUpdateConcept' => [
            'application/ld+json',
            'application/json',
        ],
        'dearchiveConcept' => [
            'application/json',
        ],
        'export' => [
            'application/json',
        ],
        'findConceptByIdOrProductnummer' => [
            'application/json',
        ],
        'findConceptsByIdsOrProductnummers' => [
            'application/json',
        ],
        'findPage' => [
            'application/json',
        ],
        'getConceptDelta' => [
            'application/json',
        ],
        'redirectToFindConceptByIdOrProductnummer' => [
            'application/json',
        ],
        'redirectToFindConceptPage' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation archiveConcept
     *
     * Archive the concept based on concept-id or productnummer.
     *
     * @param  string $id_or_productnummer Pass the concept-id or the productnummer for the concept to archive (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['archiveConcept'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function archiveConcept($id_or_productnummer, string $contentType = self::contentTypes['archiveConcept'][0])
    {
        $this->archiveConceptWithHttpInfo($id_or_productnummer, $contentType);
    }

    /**
     * Operation archiveConceptWithHttpInfo
     *
     * Archive the concept based on concept-id or productnummer.
     *
     * @param  string $id_or_productnummer Pass the concept-id or the productnummer for the concept to archive (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['archiveConcept'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function archiveConceptWithHttpInfo($id_or_productnummer, string $contentType = self::contentTypes['archiveConcept'][0])
    {
        $request = $this->archiveConceptRequest($id_or_productnummer, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation archiveConceptAsync
     *
     * Archive the concept based on concept-id or productnummer.
     *
     * @param  string $id_or_productnummer Pass the concept-id or the productnummer for the concept to archive (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['archiveConcept'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function archiveConceptAsync($id_or_productnummer, string $contentType = self::contentTypes['archiveConcept'][0])
    {
        return $this->archiveConceptAsyncWithHttpInfo($id_or_productnummer, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation archiveConceptAsyncWithHttpInfo
     *
     * Archive the concept based on concept-id or productnummer.
     *
     * @param  string $id_or_productnummer Pass the concept-id or the productnummer for the concept to archive (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['archiveConcept'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function archiveConceptAsyncWithHttpInfo($id_or_productnummer, string $contentType = self::contentTypes['archiveConcept'][0])
    {
        $returnType = '';
        $request = $this->archiveConceptRequest($id_or_productnummer, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'archiveConcept'
     *
     * @param  string $id_or_productnummer Pass the concept-id or the productnummer for the concept to archive (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['archiveConcept'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function archiveConceptRequest($id_or_productnummer, string $contentType = self::contentTypes['archiveConcept'][0])
    {

        // verify the required parameter 'id_or_productnummer' is set
        if ($id_or_productnummer === null || (is_array($id_or_productnummer) && count($id_or_productnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_or_productnummer when calling archiveConcept'
            );
        }


        $resourcePath = '/doc/concept/{idOrProductnummer}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id_or_productnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'idOrProductnummer' . '}',
                ObjectSerializer::toPathValue($id_or_productnummer),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/ld+json', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createOrUpdateConcept
     *
     * Create a new concept or (if id/productnummer in body) update a concept.
     *
     * @param  \OpenAPI\Client\Model\UpsertConceptJson $upsert_concept_json upsert_concept_json (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrUpdateConcept'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonLdWrappedJsonConceptJson|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function createOrUpdateConcept($upsert_concept_json, string $contentType = self::contentTypes['createOrUpdateConcept'][0])
    {
        list($response) = $this->createOrUpdateConceptWithHttpInfo($upsert_concept_json, $contentType);
        return $response;
    }

    /**
     * Operation createOrUpdateConceptWithHttpInfo
     *
     * Create a new concept or (if id/productnummer in body) update a concept.
     *
     * @param  \OpenAPI\Client\Model\UpsertConceptJson $upsert_concept_json (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrUpdateConcept'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonLdWrappedJsonConceptJson|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOrUpdateConceptWithHttpInfo($upsert_concept_json, string $contentType = self::contentTypes['createOrUpdateConcept'][0])
    {
        $request = $this->createOrUpdateConceptRequest($upsert_concept_json, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\JsonLdWrappedJsonConceptJson',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\JsonLdWrappedJsonConceptJson',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonLdWrappedJsonConceptJson',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createOrUpdateConceptAsync
     *
     * Create a new concept or (if id/productnummer in body) update a concept.
     *
     * @param  \OpenAPI\Client\Model\UpsertConceptJson $upsert_concept_json (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrUpdateConcept'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrUpdateConceptAsync($upsert_concept_json, string $contentType = self::contentTypes['createOrUpdateConcept'][0])
    {
        return $this->createOrUpdateConceptAsyncWithHttpInfo($upsert_concept_json, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOrUpdateConceptAsyncWithHttpInfo
     *
     * Create a new concept or (if id/productnummer in body) update a concept.
     *
     * @param  \OpenAPI\Client\Model\UpsertConceptJson $upsert_concept_json (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrUpdateConcept'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOrUpdateConceptAsyncWithHttpInfo($upsert_concept_json, string $contentType = self::contentTypes['createOrUpdateConcept'][0])
    {
        $returnType = '\OpenAPI\Client\Model\JsonLdWrappedJsonConceptJson';
        $request = $this->createOrUpdateConceptRequest($upsert_concept_json, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOrUpdateConcept'
     *
     * @param  \OpenAPI\Client\Model\UpsertConceptJson $upsert_concept_json (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrUpdateConcept'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createOrUpdateConceptRequest($upsert_concept_json, string $contentType = self::contentTypes['createOrUpdateConcept'][0])
    {

        // verify the required parameter 'upsert_concept_json' is set
        if ($upsert_concept_json === null || (is_array($upsert_concept_json) && count($upsert_concept_json) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $upsert_concept_json when calling createOrUpdateConcept'
            );
        }


        $resourcePath = '/doc/concept';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/ld+json', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($upsert_concept_json)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($upsert_concept_json));
            } else {
                $httpBody = $upsert_concept_json;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dearchiveConcept
     *
     * Dearchive the concept based on concept-id or productnummer.
     *
     * @param  string $id_or_productnummer Pass the concept-id or the productnummer for the concept to dearchive (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dearchiveConcept'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function dearchiveConcept($id_or_productnummer, string $contentType = self::contentTypes['dearchiveConcept'][0])
    {
        $this->dearchiveConceptWithHttpInfo($id_or_productnummer, $contentType);
    }

    /**
     * Operation dearchiveConceptWithHttpInfo
     *
     * Dearchive the concept based on concept-id or productnummer.
     *
     * @param  string $id_or_productnummer Pass the concept-id or the productnummer for the concept to dearchive (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dearchiveConcept'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function dearchiveConceptWithHttpInfo($id_or_productnummer, string $contentType = self::contentTypes['dearchiveConcept'][0])
    {
        $request = $this->dearchiveConceptRequest($id_or_productnummer, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation dearchiveConceptAsync
     *
     * Dearchive the concept based on concept-id or productnummer.
     *
     * @param  string $id_or_productnummer Pass the concept-id or the productnummer for the concept to dearchive (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dearchiveConcept'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dearchiveConceptAsync($id_or_productnummer, string $contentType = self::contentTypes['dearchiveConcept'][0])
    {
        return $this->dearchiveConceptAsyncWithHttpInfo($id_or_productnummer, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dearchiveConceptAsyncWithHttpInfo
     *
     * Dearchive the concept based on concept-id or productnummer.
     *
     * @param  string $id_or_productnummer Pass the concept-id or the productnummer for the concept to dearchive (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dearchiveConcept'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dearchiveConceptAsyncWithHttpInfo($id_or_productnummer, string $contentType = self::contentTypes['dearchiveConcept'][0])
    {
        $returnType = '';
        $request = $this->dearchiveConceptRequest($id_or_productnummer, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dearchiveConcept'
     *
     * @param  string $id_or_productnummer Pass the concept-id or the productnummer for the concept to dearchive (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dearchiveConcept'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dearchiveConceptRequest($id_or_productnummer, string $contentType = self::contentTypes['dearchiveConcept'][0])
    {

        // verify the required parameter 'id_or_productnummer' is set
        if ($id_or_productnummer === null || (is_array($id_or_productnummer) && count($id_or_productnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_or_productnummer when calling dearchiveConcept'
            );
        }


        $resourcePath = '/doc/concept/{idOrProductnummer}/dearchive';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id_or_productnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'idOrProductnummer' . '}',
                ObjectSerializer::toPathValue($id_or_productnummer),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/ld+json', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation export
     *
     * Fetch concept page to export. Filter by laatstOntvangen in requestParams.
     *
     * @param  int|null $page_index Specifies the page the API needs to return. Default 0 (first page) (optional)
     * @param  int|null $limit Specifies the amount of concepts on one page. (optional)
     * @param  \DateTime|null $laatst_ontvangen_vanaf If specified, the API will only return concepten that have been received from the given timestamp. Using the ISO specification (yyyy-MM-ddThh:mm:ssZ) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['export'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\HydraCollectionJsonLdWrappedJsonConceptJson|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function export($page_index = null, $limit = null, $laatst_ontvangen_vanaf = null, string $contentType = self::contentTypes['export'][0])
    {
        list($response) = $this->exportWithHttpInfo($page_index, $limit, $laatst_ontvangen_vanaf, $contentType);
        return $response;
    }

    /**
     * Operation exportWithHttpInfo
     *
     * Fetch concept page to export. Filter by laatstOntvangen in requestParams.
     *
     * @param  int|null $page_index Specifies the page the API needs to return. Default 0 (first page) (optional)
     * @param  int|null $limit Specifies the amount of concepts on one page. (optional)
     * @param  \DateTime|null $laatst_ontvangen_vanaf If specified, the API will only return concepten that have been received from the given timestamp. Using the ISO specification (yyyy-MM-ddThh:mm:ssZ) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['export'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\HydraCollectionJsonLdWrappedJsonConceptJson|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportWithHttpInfo($page_index = null, $limit = null, $laatst_ontvangen_vanaf = null, string $contentType = self::contentTypes['export'][0])
    {
        $request = $this->exportRequest($page_index, $limit, $laatst_ontvangen_vanaf, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\HydraCollectionJsonLdWrappedJsonConceptJson',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\HydraCollectionJsonLdWrappedJsonConceptJson',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HydraCollectionJsonLdWrappedJsonConceptJson',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation exportAsync
     *
     * Fetch concept page to export. Filter by laatstOntvangen in requestParams.
     *
     * @param  int|null $page_index Specifies the page the API needs to return. Default 0 (first page) (optional)
     * @param  int|null $limit Specifies the amount of concepts on one page. (optional)
     * @param  \DateTime|null $laatst_ontvangen_vanaf If specified, the API will only return concepten that have been received from the given timestamp. Using the ISO specification (yyyy-MM-ddThh:mm:ssZ) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['export'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportAsync($page_index = null, $limit = null, $laatst_ontvangen_vanaf = null, string $contentType = self::contentTypes['export'][0])
    {
        return $this->exportAsyncWithHttpInfo($page_index, $limit, $laatst_ontvangen_vanaf, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportAsyncWithHttpInfo
     *
     * Fetch concept page to export. Filter by laatstOntvangen in requestParams.
     *
     * @param  int|null $page_index Specifies the page the API needs to return. Default 0 (first page) (optional)
     * @param  int|null $limit Specifies the amount of concepts on one page. (optional)
     * @param  \DateTime|null $laatst_ontvangen_vanaf If specified, the API will only return concepten that have been received from the given timestamp. Using the ISO specification (yyyy-MM-ddThh:mm:ssZ) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['export'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportAsyncWithHttpInfo($page_index = null, $limit = null, $laatst_ontvangen_vanaf = null, string $contentType = self::contentTypes['export'][0])
    {
        $returnType = '\OpenAPI\Client\Model\HydraCollectionJsonLdWrappedJsonConceptJson';
        $request = $this->exportRequest($page_index, $limit, $laatst_ontvangen_vanaf, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'export'
     *
     * @param  int|null $page_index Specifies the page the API needs to return. Default 0 (first page) (optional)
     * @param  int|null $limit Specifies the amount of concepts on one page. (optional)
     * @param  \DateTime|null $laatst_ontvangen_vanaf If specified, the API will only return concepten that have been received from the given timestamp. Using the ISO specification (yyyy-MM-ddThh:mm:ssZ) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['export'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function exportRequest($page_index = null, $limit = null, $laatst_ontvangen_vanaf = null, string $contentType = self::contentTypes['export'][0])
    {





        $resourcePath = '/doc/concept/export';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_index,
            'pageIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $laatst_ontvangen_vanaf,
            'laatstOntvangenVanaf', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/ld+json', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findConceptByIdOrProductnummer
     *
     * Fetch the details of the concept.
     *
     * @param  string $id_or_productnummer Pass the concept-id or productnummer for the concept to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findConceptByIdOrProductnummer'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonLdWrappedJsonConceptJson|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function findConceptByIdOrProductnummer($id_or_productnummer, string $contentType = self::contentTypes['findConceptByIdOrProductnummer'][0])
    {
        list($response) = $this->findConceptByIdOrProductnummerWithHttpInfo($id_or_productnummer, $contentType);
        return $response;
    }

    /**
     * Operation findConceptByIdOrProductnummerWithHttpInfo
     *
     * Fetch the details of the concept.
     *
     * @param  string $id_or_productnummer Pass the concept-id or productnummer for the concept to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findConceptByIdOrProductnummer'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonLdWrappedJsonConceptJson|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function findConceptByIdOrProductnummerWithHttpInfo($id_or_productnummer, string $contentType = self::contentTypes['findConceptByIdOrProductnummer'][0])
    {
        $request = $this->findConceptByIdOrProductnummerRequest($id_or_productnummer, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\JsonLdWrappedJsonConceptJson',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\JsonLdWrappedJsonConceptJson',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonLdWrappedJsonConceptJson',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findConceptByIdOrProductnummerAsync
     *
     * Fetch the details of the concept.
     *
     * @param  string $id_or_productnummer Pass the concept-id or productnummer for the concept to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findConceptByIdOrProductnummer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findConceptByIdOrProductnummerAsync($id_or_productnummer, string $contentType = self::contentTypes['findConceptByIdOrProductnummer'][0])
    {
        return $this->findConceptByIdOrProductnummerAsyncWithHttpInfo($id_or_productnummer, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findConceptByIdOrProductnummerAsyncWithHttpInfo
     *
     * Fetch the details of the concept.
     *
     * @param  string $id_or_productnummer Pass the concept-id or productnummer for the concept to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findConceptByIdOrProductnummer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findConceptByIdOrProductnummerAsyncWithHttpInfo($id_or_productnummer, string $contentType = self::contentTypes['findConceptByIdOrProductnummer'][0])
    {
        $returnType = '\OpenAPI\Client\Model\JsonLdWrappedJsonConceptJson';
        $request = $this->findConceptByIdOrProductnummerRequest($id_or_productnummer, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findConceptByIdOrProductnummer'
     *
     * @param  string $id_or_productnummer Pass the concept-id or productnummer for the concept to fetch (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findConceptByIdOrProductnummer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findConceptByIdOrProductnummerRequest($id_or_productnummer, string $contentType = self::contentTypes['findConceptByIdOrProductnummer'][0])
    {

        // verify the required parameter 'id_or_productnummer' is set
        if ($id_or_productnummer === null || (is_array($id_or_productnummer) && count($id_or_productnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_or_productnummer when calling findConceptByIdOrProductnummer'
            );
        }


        $resourcePath = '/doc/concept/{idOrProductnummer}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id_or_productnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'idOrProductnummer' . '}',
                ObjectSerializer::toPathValue($id_or_productnummer),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/ld+json', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findConceptsByIdsOrProductnummers
     *
     * Fetch the details of the concepten.
     *
     * @param  string $ids Pass the concept-ids or productnummers of the concepten to fetch. This should be encoded as a comma-separated list. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findConceptsByIdsOrProductnummers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JsonLdWrappedJsonConceptJson[]|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function findConceptsByIdsOrProductnummers($ids, string $contentType = self::contentTypes['findConceptsByIdsOrProductnummers'][0])
    {
        list($response) = $this->findConceptsByIdsOrProductnummersWithHttpInfo($ids, $contentType);
        return $response;
    }

    /**
     * Operation findConceptsByIdsOrProductnummersWithHttpInfo
     *
     * Fetch the details of the concepten.
     *
     * @param  string $ids Pass the concept-ids or productnummers of the concepten to fetch. This should be encoded as a comma-separated list. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findConceptsByIdsOrProductnummers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JsonLdWrappedJsonConceptJson[]|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function findConceptsByIdsOrProductnummersWithHttpInfo($ids, string $contentType = self::contentTypes['findConceptsByIdsOrProductnummers'][0])
    {
        $request = $this->findConceptsByIdsOrProductnummersRequest($ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\JsonLdWrappedJsonConceptJson[]',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\JsonLdWrappedJsonConceptJson[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JsonLdWrappedJsonConceptJson[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findConceptsByIdsOrProductnummersAsync
     *
     * Fetch the details of the concepten.
     *
     * @param  string $ids Pass the concept-ids or productnummers of the concepten to fetch. This should be encoded as a comma-separated list. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findConceptsByIdsOrProductnummers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findConceptsByIdsOrProductnummersAsync($ids, string $contentType = self::contentTypes['findConceptsByIdsOrProductnummers'][0])
    {
        return $this->findConceptsByIdsOrProductnummersAsyncWithHttpInfo($ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findConceptsByIdsOrProductnummersAsyncWithHttpInfo
     *
     * Fetch the details of the concepten.
     *
     * @param  string $ids Pass the concept-ids or productnummers of the concepten to fetch. This should be encoded as a comma-separated list. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findConceptsByIdsOrProductnummers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findConceptsByIdsOrProductnummersAsyncWithHttpInfo($ids, string $contentType = self::contentTypes['findConceptsByIdsOrProductnummers'][0])
    {
        $returnType = '\OpenAPI\Client\Model\JsonLdWrappedJsonConceptJson[]';
        $request = $this->findConceptsByIdsOrProductnummersRequest($ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findConceptsByIdsOrProductnummers'
     *
     * @param  string $ids Pass the concept-ids or productnummers of the concepten to fetch. This should be encoded as a comma-separated list. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findConceptsByIdsOrProductnummers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findConceptsByIdsOrProductnummersRequest($ids, string $contentType = self::contentTypes['findConceptsByIdsOrProductnummers'][0])
    {

        // verify the required parameter 'ids' is set
        if ($ids === null || (is_array($ids) && count($ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ids when calling findConceptsByIdsOrProductnummers'
            );
        }


        $resourcePath = '/doc/concept/byIds/{ids}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ids !== null) {
            $resourcePath = str_replace(
                '{' . 'ids' . '}',
                ObjectSerializer::toPathValue($ids),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/ld+json', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findPage
     *
     * Fetch concepten page. Filter by using requestparams.
     *
     * @param  int|null $page_index Specifies the page that the API will return. Default 0 (first page) (optional)
     * @param  int|null $limit Specifies the amount of concepts on one page. (optional)
     * @param  string|null $sort_by On which property to sort (optional)
     * @param  string|null $vertaling If specified, the API will only return concepts of that language (optional)
     * @param  string|null $zoekterm If specified, the API will only return concepts where the name and/or description and/or search terms matches the value of the zoekterm.  If the &#39;vertalingen&#39; queryparam is passed, we will only look for a match in concepts for the specified language. (optional)
     * @param  string[]|null $uitvoerend_bestuursniveaus If specified, the API will only return concepts with the given uitvoerendBestuursniveau. E.g. Vlaams. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $bevoegd_bestuursniveaus If specified, the API will only return concepts with the given bevoegdBestuursniveau. E.g. Europees. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $doelgroepen If specified, the API will only return concepts with the given doelgroep. E.g. Burger. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $themas If specified, the API will only return concepts with the given thema. E.g. BurgerOverheid. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $types If specified, the API will only return concepts with one of the given types. E.g. AdviesBegeleiding. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  bool|null $gearchiveerd If true, the API will also return concepts that have been archived (optional)
     * @param  \DateTime|null $eind_datum_vanaf If specified, the result wil only contain the concepts having an end Date larger than the specified date, or has an empty end date. This Using the ISO specification ISO specification (yyyy-MM-ddThh:mm:ssZ). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findPage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\HydraCollectionJsonLdWrappedJsonConceptJson|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function findPage($page_index = null, $limit = null, $sort_by = null, $vertaling = null, $zoekterm = null, $uitvoerend_bestuursniveaus = null, $bevoegd_bestuursniveaus = null, $doelgroepen = null, $themas = null, $types = null, $gearchiveerd = null, $eind_datum_vanaf = null, string $contentType = self::contentTypes['findPage'][0])
    {
        list($response) = $this->findPageWithHttpInfo($page_index, $limit, $sort_by, $vertaling, $zoekterm, $uitvoerend_bestuursniveaus, $bevoegd_bestuursniveaus, $doelgroepen, $themas, $types, $gearchiveerd, $eind_datum_vanaf, $contentType);
        return $response;
    }

    /**
     * Operation findPageWithHttpInfo
     *
     * Fetch concepten page. Filter by using requestparams.
     *
     * @param  int|null $page_index Specifies the page that the API will return. Default 0 (first page) (optional)
     * @param  int|null $limit Specifies the amount of concepts on one page. (optional)
     * @param  string|null $sort_by On which property to sort (optional)
     * @param  string|null $vertaling If specified, the API will only return concepts of that language (optional)
     * @param  string|null $zoekterm If specified, the API will only return concepts where the name and/or description and/or search terms matches the value of the zoekterm.  If the &#39;vertalingen&#39; queryparam is passed, we will only look for a match in concepts for the specified language. (optional)
     * @param  string[]|null $uitvoerend_bestuursniveaus If specified, the API will only return concepts with the given uitvoerendBestuursniveau. E.g. Vlaams. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $bevoegd_bestuursniveaus If specified, the API will only return concepts with the given bevoegdBestuursniveau. E.g. Europees. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $doelgroepen If specified, the API will only return concepts with the given doelgroep. E.g. Burger. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $themas If specified, the API will only return concepts with the given thema. E.g. BurgerOverheid. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $types If specified, the API will only return concepts with one of the given types. E.g. AdviesBegeleiding. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  bool|null $gearchiveerd If true, the API will also return concepts that have been archived (optional)
     * @param  \DateTime|null $eind_datum_vanaf If specified, the result wil only contain the concepts having an end Date larger than the specified date, or has an empty end date. This Using the ISO specification ISO specification (yyyy-MM-ddThh:mm:ssZ). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findPage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\HydraCollectionJsonLdWrappedJsonConceptJson|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function findPageWithHttpInfo($page_index = null, $limit = null, $sort_by = null, $vertaling = null, $zoekterm = null, $uitvoerend_bestuursniveaus = null, $bevoegd_bestuursniveaus = null, $doelgroepen = null, $themas = null, $types = null, $gearchiveerd = null, $eind_datum_vanaf = null, string $contentType = self::contentTypes['findPage'][0])
    {
        $request = $this->findPageRequest($page_index, $limit, $sort_by, $vertaling, $zoekterm, $uitvoerend_bestuursniveaus, $bevoegd_bestuursniveaus, $doelgroepen, $themas, $types, $gearchiveerd, $eind_datum_vanaf, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\HydraCollectionJsonLdWrappedJsonConceptJson',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\HydraCollectionJsonLdWrappedJsonConceptJson',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HydraCollectionJsonLdWrappedJsonConceptJson',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findPageAsync
     *
     * Fetch concepten page. Filter by using requestparams.
     *
     * @param  int|null $page_index Specifies the page that the API will return. Default 0 (first page) (optional)
     * @param  int|null $limit Specifies the amount of concepts on one page. (optional)
     * @param  string|null $sort_by On which property to sort (optional)
     * @param  string|null $vertaling If specified, the API will only return concepts of that language (optional)
     * @param  string|null $zoekterm If specified, the API will only return concepts where the name and/or description and/or search terms matches the value of the zoekterm.  If the &#39;vertalingen&#39; queryparam is passed, we will only look for a match in concepts for the specified language. (optional)
     * @param  string[]|null $uitvoerend_bestuursniveaus If specified, the API will only return concepts with the given uitvoerendBestuursniveau. E.g. Vlaams. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $bevoegd_bestuursniveaus If specified, the API will only return concepts with the given bevoegdBestuursniveau. E.g. Europees. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $doelgroepen If specified, the API will only return concepts with the given doelgroep. E.g. Burger. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $themas If specified, the API will only return concepts with the given thema. E.g. BurgerOverheid. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $types If specified, the API will only return concepts with one of the given types. E.g. AdviesBegeleiding. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  bool|null $gearchiveerd If true, the API will also return concepts that have been archived (optional)
     * @param  \DateTime|null $eind_datum_vanaf If specified, the result wil only contain the concepts having an end Date larger than the specified date, or has an empty end date. This Using the ISO specification ISO specification (yyyy-MM-ddThh:mm:ssZ). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findPage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findPageAsync($page_index = null, $limit = null, $sort_by = null, $vertaling = null, $zoekterm = null, $uitvoerend_bestuursniveaus = null, $bevoegd_bestuursniveaus = null, $doelgroepen = null, $themas = null, $types = null, $gearchiveerd = null, $eind_datum_vanaf = null, string $contentType = self::contentTypes['findPage'][0])
    {
        return $this->findPageAsyncWithHttpInfo($page_index, $limit, $sort_by, $vertaling, $zoekterm, $uitvoerend_bestuursniveaus, $bevoegd_bestuursniveaus, $doelgroepen, $themas, $types, $gearchiveerd, $eind_datum_vanaf, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findPageAsyncWithHttpInfo
     *
     * Fetch concepten page. Filter by using requestparams.
     *
     * @param  int|null $page_index Specifies the page that the API will return. Default 0 (first page) (optional)
     * @param  int|null $limit Specifies the amount of concepts on one page. (optional)
     * @param  string|null $sort_by On which property to sort (optional)
     * @param  string|null $vertaling If specified, the API will only return concepts of that language (optional)
     * @param  string|null $zoekterm If specified, the API will only return concepts where the name and/or description and/or search terms matches the value of the zoekterm.  If the &#39;vertalingen&#39; queryparam is passed, we will only look for a match in concepts for the specified language. (optional)
     * @param  string[]|null $uitvoerend_bestuursniveaus If specified, the API will only return concepts with the given uitvoerendBestuursniveau. E.g. Vlaams. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $bevoegd_bestuursniveaus If specified, the API will only return concepts with the given bevoegdBestuursniveau. E.g. Europees. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $doelgroepen If specified, the API will only return concepts with the given doelgroep. E.g. Burger. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $themas If specified, the API will only return concepts with the given thema. E.g. BurgerOverheid. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $types If specified, the API will only return concepts with one of the given types. E.g. AdviesBegeleiding. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  bool|null $gearchiveerd If true, the API will also return concepts that have been archived (optional)
     * @param  \DateTime|null $eind_datum_vanaf If specified, the result wil only contain the concepts having an end Date larger than the specified date, or has an empty end date. This Using the ISO specification ISO specification (yyyy-MM-ddThh:mm:ssZ). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findPage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findPageAsyncWithHttpInfo($page_index = null, $limit = null, $sort_by = null, $vertaling = null, $zoekterm = null, $uitvoerend_bestuursniveaus = null, $bevoegd_bestuursniveaus = null, $doelgroepen = null, $themas = null, $types = null, $gearchiveerd = null, $eind_datum_vanaf = null, string $contentType = self::contentTypes['findPage'][0])
    {
        $returnType = '\OpenAPI\Client\Model\HydraCollectionJsonLdWrappedJsonConceptJson';
        $request = $this->findPageRequest($page_index, $limit, $sort_by, $vertaling, $zoekterm, $uitvoerend_bestuursniveaus, $bevoegd_bestuursniveaus, $doelgroepen, $themas, $types, $gearchiveerd, $eind_datum_vanaf, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findPage'
     *
     * @param  int|null $page_index Specifies the page that the API will return. Default 0 (first page) (optional)
     * @param  int|null $limit Specifies the amount of concepts on one page. (optional)
     * @param  string|null $sort_by On which property to sort (optional)
     * @param  string|null $vertaling If specified, the API will only return concepts of that language (optional)
     * @param  string|null $zoekterm If specified, the API will only return concepts where the name and/or description and/or search terms matches the value of the zoekterm.  If the &#39;vertalingen&#39; queryparam is passed, we will only look for a match in concepts for the specified language. (optional)
     * @param  string[]|null $uitvoerend_bestuursniveaus If specified, the API will only return concepts with the given uitvoerendBestuursniveau. E.g. Vlaams. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $bevoegd_bestuursniveaus If specified, the API will only return concepts with the given bevoegdBestuursniveau. E.g. Europees. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $doelgroepen If specified, the API will only return concepts with the given doelgroep. E.g. Burger. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $themas If specified, the API will only return concepts with the given thema. E.g. BurgerOverheid. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  string[]|null $types If specified, the API will only return concepts with one of the given types. E.g. AdviesBegeleiding. Possible values can be fetched using the codelijst endpoint. (optional)
     * @param  bool|null $gearchiveerd If true, the API will also return concepts that have been archived (optional)
     * @param  \DateTime|null $eind_datum_vanaf If specified, the result wil only contain the concepts having an end Date larger than the specified date, or has an empty end date. This Using the ISO specification ISO specification (yyyy-MM-ddThh:mm:ssZ). (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findPage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findPageRequest($page_index = null, $limit = null, $sort_by = null, $vertaling = null, $zoekterm = null, $uitvoerend_bestuursniveaus = null, $bevoegd_bestuursniveaus = null, $doelgroepen = null, $themas = null, $types = null, $gearchiveerd = null, $eind_datum_vanaf = null, string $contentType = self::contentTypes['findPage'][0])
    {














        $resourcePath = '/doc/concept';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_index,
            'pageIndex', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_by,
            'sortBy', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $vertaling,
            'vertaling', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $zoekterm,
            'zoekterm', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $uitvoerend_bestuursniveaus,
            'uitvoerendBestuursniveaus', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bevoegd_bestuursniveaus,
            'bevoegdBestuursniveaus', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $doelgroepen,
            'doelgroepen', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $themas,
            'themas', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $types,
            'types', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $gearchiveerd,
            'gearchiveerd', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $eind_datum_vanaf,
            'eindDatumVanaf', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/ld+json', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConceptDelta
     *
     * @param  string $id_or_productnummer id_or_productnummer (required)
     * @param  string $from from (required)
     * @param  string $to to (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConceptDelta'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ConceptDeltaJson|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function getConceptDelta($id_or_productnummer, $from, $to, string $contentType = self::contentTypes['getConceptDelta'][0])
    {
        list($response) = $this->getConceptDeltaWithHttpInfo($id_or_productnummer, $from, $to, $contentType);
        return $response;
    }

    /**
     * Operation getConceptDeltaWithHttpInfo
     *
     * @param  string $id_or_productnummer (required)
     * @param  string $from (required)
     * @param  string $to (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConceptDelta'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ConceptDeltaJson|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConceptDeltaWithHttpInfo($id_or_productnummer, $from, $to, string $contentType = self::contentTypes['getConceptDelta'][0])
    {
        $request = $this->getConceptDeltaRequest($id_or_productnummer, $from, $to, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ConceptDeltaJson',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ConceptDeltaJson',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ConceptDeltaJson',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getConceptDeltaAsync
     *
     * @param  string $id_or_productnummer (required)
     * @param  string $from (required)
     * @param  string $to (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConceptDelta'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConceptDeltaAsync($id_or_productnummer, $from, $to, string $contentType = self::contentTypes['getConceptDelta'][0])
    {
        return $this->getConceptDeltaAsyncWithHttpInfo($id_or_productnummer, $from, $to, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConceptDeltaAsyncWithHttpInfo
     *
     * @param  string $id_or_productnummer (required)
     * @param  string $from (required)
     * @param  string $to (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConceptDelta'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConceptDeltaAsyncWithHttpInfo($id_or_productnummer, $from, $to, string $contentType = self::contentTypes['getConceptDelta'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ConceptDeltaJson';
        $request = $this->getConceptDeltaRequest($id_or_productnummer, $from, $to, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConceptDelta'
     *
     * @param  string $id_or_productnummer (required)
     * @param  string $from (required)
     * @param  string $to (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConceptDelta'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getConceptDeltaRequest($id_or_productnummer, $from, $to, string $contentType = self::contentTypes['getConceptDelta'][0])
    {

        // verify the required parameter 'id_or_productnummer' is set
        if ($id_or_productnummer === null || (is_array($id_or_productnummer) && count($id_or_productnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_or_productnummer when calling getConceptDelta'
            );
        }

        // verify the required parameter 'from' is set
        if ($from === null || (is_array($from) && count($from) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from when calling getConceptDelta'
            );
        }

        // verify the required parameter 'to' is set
        if ($to === null || (is_array($to) && count($to) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to when calling getConceptDelta'
            );
        }


        $resourcePath = '/doc/concept/{idOrProductnummer}/delta';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from,
            'from', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($id_or_productnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'idOrProductnummer' . '}',
                ObjectSerializer::toPathValue($id_or_productnummer),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/ld+json', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation redirectToFindConceptByIdOrProductnummer
     *
     * Fetch de details of the concept. Redirects to /doc/concept/{idOrProductnummer}.
     *
     * @param  string $id_or_productnummer You can pass the uuid or the productnumber for a concept to fetch it by id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redirectToFindConceptByIdOrProductnummer'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function redirectToFindConceptByIdOrProductnummer($id_or_productnummer, string $contentType = self::contentTypes['redirectToFindConceptByIdOrProductnummer'][0])
    {
        $this->redirectToFindConceptByIdOrProductnummerWithHttpInfo($id_or_productnummer, $contentType);
    }

    /**
     * Operation redirectToFindConceptByIdOrProductnummerWithHttpInfo
     *
     * Fetch de details of the concept. Redirects to /doc/concept/{idOrProductnummer}.
     *
     * @param  string $id_or_productnummer You can pass the uuid or the productnumber for a concept to fetch it by id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redirectToFindConceptByIdOrProductnummer'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function redirectToFindConceptByIdOrProductnummerWithHttpInfo($id_or_productnummer, string $contentType = self::contentTypes['redirectToFindConceptByIdOrProductnummer'][0])
    {
        $request = $this->redirectToFindConceptByIdOrProductnummerRequest($id_or_productnummer, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation redirectToFindConceptByIdOrProductnummerAsync
     *
     * Fetch de details of the concept. Redirects to /doc/concept/{idOrProductnummer}.
     *
     * @param  string $id_or_productnummer You can pass the uuid or the productnumber for a concept to fetch it by id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redirectToFindConceptByIdOrProductnummer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function redirectToFindConceptByIdOrProductnummerAsync($id_or_productnummer, string $contentType = self::contentTypes['redirectToFindConceptByIdOrProductnummer'][0])
    {
        return $this->redirectToFindConceptByIdOrProductnummerAsyncWithHttpInfo($id_or_productnummer, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation redirectToFindConceptByIdOrProductnummerAsyncWithHttpInfo
     *
     * Fetch de details of the concept. Redirects to /doc/concept/{idOrProductnummer}.
     *
     * @param  string $id_or_productnummer You can pass the uuid or the productnumber for a concept to fetch it by id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redirectToFindConceptByIdOrProductnummer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function redirectToFindConceptByIdOrProductnummerAsyncWithHttpInfo($id_or_productnummer, string $contentType = self::contentTypes['redirectToFindConceptByIdOrProductnummer'][0])
    {
        $returnType = '';
        $request = $this->redirectToFindConceptByIdOrProductnummerRequest($id_or_productnummer, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'redirectToFindConceptByIdOrProductnummer'
     *
     * @param  string $id_or_productnummer You can pass the uuid or the productnumber for a concept to fetch it by id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redirectToFindConceptByIdOrProductnummer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function redirectToFindConceptByIdOrProductnummerRequest($id_or_productnummer, string $contentType = self::contentTypes['redirectToFindConceptByIdOrProductnummer'][0])
    {

        // verify the required parameter 'id_or_productnummer' is set
        if ($id_or_productnummer === null || (is_array($id_or_productnummer) && count($id_or_productnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_or_productnummer when calling redirectToFindConceptByIdOrProductnummer'
            );
        }


        $resourcePath = '/id/concept/{idOrProductnummer}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id_or_productnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'idOrProductnummer' . '}',
                ObjectSerializer::toPathValue($id_or_productnummer),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation redirectToFindConceptPage
     *
     * Fetch the first concept page. Redirects to /doc/concept.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redirectToFindConceptPage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function redirectToFindConceptPage(string $contentType = self::contentTypes['redirectToFindConceptPage'][0])
    {
        $this->redirectToFindConceptPageWithHttpInfo($contentType);
    }

    /**
     * Operation redirectToFindConceptPageWithHttpInfo
     *
     * Fetch the first concept page. Redirects to /doc/concept.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redirectToFindConceptPage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function redirectToFindConceptPageWithHttpInfo(string $contentType = self::contentTypes['redirectToFindConceptPage'][0])
    {
        $request = $this->redirectToFindConceptPageRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation redirectToFindConceptPageAsync
     *
     * Fetch the first concept page. Redirects to /doc/concept.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redirectToFindConceptPage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function redirectToFindConceptPageAsync(string $contentType = self::contentTypes['redirectToFindConceptPage'][0])
    {
        return $this->redirectToFindConceptPageAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation redirectToFindConceptPageAsyncWithHttpInfo
     *
     * Fetch the first concept page. Redirects to /doc/concept.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redirectToFindConceptPage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function redirectToFindConceptPageAsyncWithHttpInfo(string $contentType = self::contentTypes['redirectToFindConceptPage'][0])
    {
        $returnType = '';
        $request = $this->redirectToFindConceptPageRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'redirectToFindConceptPage'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redirectToFindConceptPage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function redirectToFindConceptPageRequest(string $contentType = self::contentTypes['redirectToFindConceptPage'][0])
    {


        $resourcePath = '/id/concept';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
