<?php
/**
 * ConceptLDESApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Product API
 *
 * ### Access  The Product API is a public API. If you want to make use of this api, contact someone on the team to get an API key.  Each endpoint also lists the necessary permissions to call it. You can view your own permissions by calling the `/me` endpoint.   In a few cases some of the listed permissions are optional and depend upon the specific data requested.  ### Tracing  The API uses X-request-ID and X-correlation-ID headers.   Every request that hits the API without these headers, gets a new random UUID as request-ID and correlation-ID.  If you as a client pass these id's yourself, the API will use your values, but only when they are in UUID format.   If you provide a value that is not a UUID, the api will fail to handle your request.  Providing these values enables distributed request correlation & tracing.  ### Rate limiting  GET calls to this API are rate limited.   This rate limit is configured per client. You can request a higher rate limit if needed.  The rate limit uses a token bucket that is refilled within a fixed timeframe.   Each request can use multiple tokens, depending on the number of items requested.  Information about your current limit is conveyed via the response headers of each response:  | Header                | Description                                                                                                    | Example                | |-----------------------|----------------------------------------------------------------------------------------------------------------|------------------------| | X-RateLimit-Reset     | The time at which the rate limit will reset                                                                    | 2025-07-14T15:23:45Z   | | X-RateLimit-Limit     | The maximum number of tokens to be used in the current time window                                             | 2000                   | | X-RateLimit-Remaining | The number of tokens remaining in the current time window                                                      | 670                    | | Retry-After           | Indicates how many seconds the client should wait before making a new request (only when response code is 429) | 42                     |  ### Contact
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: iom@groepen.vlaanderen.be
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ConceptLDESApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ConceptLDESApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getConceptSnapshotById' => [
            'application/json',
        ],
        'getConceptSnapshotByIdRedirect' => [
            'application/json',
        ],
        'getConceptenLastPageLdesStream' => [
            'application/json',
        ],
        'getConceptenPageLdesStream' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getConceptSnapshotById
     *
     * Fetch a concept snapshot by id.
     *
     * @param  string $id The id of the concept snapshot (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConceptSnapshotById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SnapshotJsonConceptJson|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function getConceptSnapshotById($id, string $contentType = self::contentTypes['getConceptSnapshotById'][0])
    {
        list($response) = $this->getConceptSnapshotByIdWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getConceptSnapshotByIdWithHttpInfo
     *
     * Fetch a concept snapshot by id.
     *
     * @param  string $id The id of the concept snapshot (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConceptSnapshotById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SnapshotJsonConceptJson|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConceptSnapshotByIdWithHttpInfo($id, string $contentType = self::contentTypes['getConceptSnapshotById'][0])
    {
        $request = $this->getConceptSnapshotByIdRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\SnapshotJsonConceptJson',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\SnapshotJsonConceptJson',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SnapshotJsonConceptJson',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getConceptSnapshotByIdAsync
     *
     * Fetch a concept snapshot by id.
     *
     * @param  string $id The id of the concept snapshot (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConceptSnapshotById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConceptSnapshotByIdAsync($id, string $contentType = self::contentTypes['getConceptSnapshotById'][0])
    {
        return $this->getConceptSnapshotByIdAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConceptSnapshotByIdAsyncWithHttpInfo
     *
     * Fetch a concept snapshot by id.
     *
     * @param  string $id The id of the concept snapshot (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConceptSnapshotById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConceptSnapshotByIdAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getConceptSnapshotById'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SnapshotJsonConceptJson';
        $request = $this->getConceptSnapshotByIdRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConceptSnapshotById'
     *
     * @param  string $id The id of the concept snapshot (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConceptSnapshotById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getConceptSnapshotByIdRequest($id, string $contentType = self::contentTypes['getConceptSnapshotById'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getConceptSnapshotById'
            );
        }


        $resourcePath = '/doc/conceptsnapshot/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/ld+json', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConceptSnapshotByIdRedirect
     *
     * Fetch a concept snapshot by id. Redirects to /doc/conceptsnapshot/{id}.
     *
     * @param  string $id The id of the concept snapshot (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConceptSnapshotByIdRedirect'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getConceptSnapshotByIdRedirect($id, string $contentType = self::contentTypes['getConceptSnapshotByIdRedirect'][0])
    {
        $this->getConceptSnapshotByIdRedirectWithHttpInfo($id, $contentType);
    }

    /**
     * Operation getConceptSnapshotByIdRedirectWithHttpInfo
     *
     * Fetch a concept snapshot by id. Redirects to /doc/conceptsnapshot/{id}.
     *
     * @param  string $id The id of the concept snapshot (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConceptSnapshotByIdRedirect'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConceptSnapshotByIdRedirectWithHttpInfo($id, string $contentType = self::contentTypes['getConceptSnapshotByIdRedirect'][0])
    {
        $request = $this->getConceptSnapshotByIdRedirectRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getConceptSnapshotByIdRedirectAsync
     *
     * Fetch a concept snapshot by id. Redirects to /doc/conceptsnapshot/{id}.
     *
     * @param  string $id The id of the concept snapshot (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConceptSnapshotByIdRedirect'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConceptSnapshotByIdRedirectAsync($id, string $contentType = self::contentTypes['getConceptSnapshotByIdRedirect'][0])
    {
        return $this->getConceptSnapshotByIdRedirectAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConceptSnapshotByIdRedirectAsyncWithHttpInfo
     *
     * Fetch a concept snapshot by id. Redirects to /doc/conceptsnapshot/{id}.
     *
     * @param  string $id The id of the concept snapshot (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConceptSnapshotByIdRedirect'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConceptSnapshotByIdRedirectAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getConceptSnapshotByIdRedirect'][0])
    {
        $returnType = '';
        $request = $this->getConceptSnapshotByIdRedirectRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConceptSnapshotByIdRedirect'
     *
     * @param  string $id The id of the concept snapshot (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConceptSnapshotByIdRedirect'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getConceptSnapshotByIdRedirectRequest($id, string $contentType = self::contentTypes['getConceptSnapshotByIdRedirect'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getConceptSnapshotByIdRedirect'
            );
        }


        $resourcePath = '/id/conceptsnapshot/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConceptenLastPageLdesStream
     *
     * Fetch the most recent concept snapshot page of the LDES stream. Redirects to /doc/conceptsnapshot.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConceptenLastPageLdesStream'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getConceptenLastPageLdesStream(string $contentType = self::contentTypes['getConceptenLastPageLdesStream'][0])
    {
        $this->getConceptenLastPageLdesStreamWithHttpInfo($contentType);
    }

    /**
     * Operation getConceptenLastPageLdesStreamWithHttpInfo
     *
     * Fetch the most recent concept snapshot page of the LDES stream. Redirects to /doc/conceptsnapshot.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConceptenLastPageLdesStream'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConceptenLastPageLdesStreamWithHttpInfo(string $contentType = self::contentTypes['getConceptenLastPageLdesStream'][0])
    {
        $request = $this->getConceptenLastPageLdesStreamRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getConceptenLastPageLdesStreamAsync
     *
     * Fetch the most recent concept snapshot page of the LDES stream. Redirects to /doc/conceptsnapshot.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConceptenLastPageLdesStream'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConceptenLastPageLdesStreamAsync(string $contentType = self::contentTypes['getConceptenLastPageLdesStream'][0])
    {
        return $this->getConceptenLastPageLdesStreamAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConceptenLastPageLdesStreamAsyncWithHttpInfo
     *
     * Fetch the most recent concept snapshot page of the LDES stream. Redirects to /doc/conceptsnapshot.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConceptenLastPageLdesStream'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConceptenLastPageLdesStreamAsyncWithHttpInfo(string $contentType = self::contentTypes['getConceptenLastPageLdesStream'][0])
    {
        $returnType = '';
        $request = $this->getConceptenLastPageLdesStreamRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConceptenLastPageLdesStream'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConceptenLastPageLdesStream'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getConceptenLastPageLdesStreamRequest(string $contentType = self::contentTypes['getConceptenLastPageLdesStream'][0])
    {


        $resourcePath = '/id/conceptsnapshot';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConceptenPageLdesStream
     *
     * Fetch a concept snapshot page of the LDES stream.
     *
     * @param  int|null $page_number Specifies the page the API needs to return. Default last page. (optional)
     * @param  int|null $limit Specifies the amount of instance snapshots on one page. (optional)
     * @param  string|null $concept The concept-id or productnummer of the concept snapshot (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConceptenPageLdesStream'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EventStreamSnapshotJsonConceptJson|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto
     */
    public function getConceptenPageLdesStream($page_number = null, $limit = null, $concept = null, string $contentType = self::contentTypes['getConceptenPageLdesStream'][0])
    {
        list($response) = $this->getConceptenPageLdesStreamWithHttpInfo($page_number, $limit, $concept, $contentType);
        return $response;
    }

    /**
     * Operation getConceptenPageLdesStreamWithHttpInfo
     *
     * Fetch a concept snapshot page of the LDES stream.
     *
     * @param  int|null $page_number Specifies the page the API needs to return. Default last page. (optional)
     * @param  int|null $limit Specifies the amount of instance snapshots on one page. (optional)
     * @param  string|null $concept The concept-id or productnummer of the concept snapshot (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConceptenPageLdesStream'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EventStreamSnapshotJsonConceptJson|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto|\OpenAPI\Client\Model\ErrorDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConceptenPageLdesStreamWithHttpInfo($page_number = null, $limit = null, $concept = null, string $contentType = self::contentTypes['getConceptenPageLdesStream'][0])
    {
        $request = $this->getConceptenPageLdesStreamRequest($page_number, $limit, $concept, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\EventStreamSnapshotJsonConceptJson',
                        $request,
                        $response,
                    );
                case 415:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ErrorDto',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\EventStreamSnapshotJsonConceptJson',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EventStreamSnapshotJsonConceptJson',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ErrorDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getConceptenPageLdesStreamAsync
     *
     * Fetch a concept snapshot page of the LDES stream.
     *
     * @param  int|null $page_number Specifies the page the API needs to return. Default last page. (optional)
     * @param  int|null $limit Specifies the amount of instance snapshots on one page. (optional)
     * @param  string|null $concept The concept-id or productnummer of the concept snapshot (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConceptenPageLdesStream'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConceptenPageLdesStreamAsync($page_number = null, $limit = null, $concept = null, string $contentType = self::contentTypes['getConceptenPageLdesStream'][0])
    {
        return $this->getConceptenPageLdesStreamAsyncWithHttpInfo($page_number, $limit, $concept, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConceptenPageLdesStreamAsyncWithHttpInfo
     *
     * Fetch a concept snapshot page of the LDES stream.
     *
     * @param  int|null $page_number Specifies the page the API needs to return. Default last page. (optional)
     * @param  int|null $limit Specifies the amount of instance snapshots on one page. (optional)
     * @param  string|null $concept The concept-id or productnummer of the concept snapshot (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConceptenPageLdesStream'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConceptenPageLdesStreamAsyncWithHttpInfo($page_number = null, $limit = null, $concept = null, string $contentType = self::contentTypes['getConceptenPageLdesStream'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EventStreamSnapshotJsonConceptJson';
        $request = $this->getConceptenPageLdesStreamRequest($page_number, $limit, $concept, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConceptenPageLdesStream'
     *
     * @param  int|null $page_number Specifies the page the API needs to return. Default last page. (optional)
     * @param  int|null $limit Specifies the amount of instance snapshots on one page. (optional)
     * @param  string|null $concept The concept-id or productnummer of the concept snapshot (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConceptenPageLdesStream'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getConceptenPageLdesStreamRequest($page_number = null, $limit = null, $concept = null, string $contentType = self::contentTypes['getConceptenPageLdesStream'][0])
    {





        $resourcePath = '/doc/conceptsnapshot';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_number,
            'pageNumber', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $concept,
            'concept', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/ld+json', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
