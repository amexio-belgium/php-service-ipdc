<?php
/**
 * EventStreamSnapshotJsonInstantieJson
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Product API
 *
 * ### Access  The Product API is a public API. If you want to make use of this api, contact someone on the team to get an API key.  Each endpoint also lists the necessary permissions to call it. You can view your own permissions by calling the `/me` endpoint.   In a few cases some of the listed permissions are optional and depend upon the specific data requested.  ### Tracing  The API uses X-request-ID and X-correlation-ID headers.   Every request that hits the API without these headers, gets a new random UUID as request-ID and correlation-ID.  If you as a client pass these id's yourself, the API will use your values, but only when they are in UUID format.   If you provide a value that is not a UUID, the api will fail to handle your request.  Providing these values enables distributed request correlation & tracing.  ### Rate limiting  GET calls to this API are rate limited.   This rate limit is configured per client. You can request a higher rate limit if needed.  The rate limit uses a token bucket that is refilled within a fixed timeframe.   Each request can use multiple tokens, depending on the number of items requested.  Information about your current limit is conveyed via the response headers of each response:  | Header                | Description                                                                                                    | Example                | |-----------------------|----------------------------------------------------------------------------------------------------------------|------------------------| | X-RateLimit-Reset     | The time at which the rate limit will reset                                                                    | 2025-07-14T15:23:45Z   | | X-RateLimit-Limit     | The maximum number of tokens to be used in the current time window                                             | 2000                   | | X-RateLimit-Remaining | The number of tokens remaining in the current time window                                                      | 670                    | | Retry-After           | Indicates how many seconds the client should wait before making a new request (only when response code is 429) | 42                     |  ### Contact
 *
 * The version of the OpenAPI document: 1.0.3
 * Contact: iom@groepen.vlaanderen.be
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EventStreamSnapshotJsonInstantieJson Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EventStreamSnapshotJsonInstantieJson implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EventStreamSnapshotJsonInstantieJson';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'timestamp_path' => 'string',
        'version_of_path' => 'string',
        'view' => '\OpenAPI\Client\Model\View',
        'at_context' => 'string[]',
        'at_id' => 'string',
        'at_type' => 'string',
        'member' => '\OpenAPI\Client\Model\SnapshotJsonInstantieJson[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'timestamp_path' => null,
        'version_of_path' => null,
        'view' => null,
        'at_context' => 'uri',
        'at_id' => 'uri',
        'at_type' => null,
        'member' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'timestamp_path' => false,
        'version_of_path' => false,
        'view' => false,
        'at_context' => false,
        'at_id' => false,
        'at_type' => false,
        'member' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'timestamp_path' => 'timestampPath',
        'version_of_path' => 'versionOfPath',
        'view' => 'view',
        'at_context' => '@context',
        'at_id' => '@id',
        'at_type' => '@type',
        'member' => 'member'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'timestamp_path' => 'setTimestampPath',
        'version_of_path' => 'setVersionOfPath',
        'view' => 'setView',
        'at_context' => 'setAtContext',
        'at_id' => 'setAtId',
        'at_type' => 'setAtType',
        'member' => 'setMember'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'timestamp_path' => 'getTimestampPath',
        'version_of_path' => 'getVersionOfPath',
        'view' => 'getView',
        'at_context' => 'getAtContext',
        'at_id' => 'getAtId',
        'at_type' => 'getAtType',
        'member' => 'getMember'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('timestamp_path', $data ?? [], null);
        $this->setIfExists('version_of_path', $data ?? [], null);
        $this->setIfExists('view', $data ?? [], null);
        $this->setIfExists('at_context', $data ?? [], null);
        $this->setIfExists('at_id', $data ?? [], null);
        $this->setIfExists('at_type', $data ?? [], null);
        $this->setIfExists('member', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets timestamp_path
     *
     * @return string|null
     */
    public function getTimestampPath()
    {
        return $this->container['timestamp_path'];
    }

    /**
     * Sets timestamp_path
     *
     * @param string|null $timestamp_path timestamp_path
     *
     * @return self
     */
    public function setTimestampPath($timestamp_path)
    {
        if (is_null($timestamp_path)) {
            throw new \InvalidArgumentException('non-nullable timestamp_path cannot be null');
        }
        $this->container['timestamp_path'] = $timestamp_path;

        return $this;
    }

    /**
     * Gets version_of_path
     *
     * @return string|null
     */
    public function getVersionOfPath()
    {
        return $this->container['version_of_path'];
    }

    /**
     * Sets version_of_path
     *
     * @param string|null $version_of_path version_of_path
     *
     * @return self
     */
    public function setVersionOfPath($version_of_path)
    {
        if (is_null($version_of_path)) {
            throw new \InvalidArgumentException('non-nullable version_of_path cannot be null');
        }
        $this->container['version_of_path'] = $version_of_path;

        return $this;
    }

    /**
     * Gets view
     *
     * @return \OpenAPI\Client\Model\View|null
     */
    public function getView()
    {
        return $this->container['view'];
    }

    /**
     * Sets view
     *
     * @param \OpenAPI\Client\Model\View|null $view view
     *
     * @return self
     */
    public function setView($view)
    {
        if (is_null($view)) {
            throw new \InvalidArgumentException('non-nullable view cannot be null');
        }
        $this->container['view'] = $view;

        return $this;
    }

    /**
     * Gets at_context
     *
     * @return string[]|null
     */
    public function getAtContext()
    {
        return $this->container['at_context'];
    }

    /**
     * Sets at_context
     *
     * @param string[]|null $at_context at_context
     *
     * @return self
     */
    public function setAtContext($at_context)
    {
        if (is_null($at_context)) {
            throw new \InvalidArgumentException('non-nullable at_context cannot be null');
        }
        $this->container['at_context'] = $at_context;

        return $this;
    }

    /**
     * Gets at_id
     *
     * @return string|null
     */
    public function getAtId()
    {
        return $this->container['at_id'];
    }

    /**
     * Sets at_id
     *
     * @param string|null $at_id at_id
     *
     * @return self
     */
    public function setAtId($at_id)
    {
        if (is_null($at_id)) {
            throw new \InvalidArgumentException('non-nullable at_id cannot be null');
        }
        $this->container['at_id'] = $at_id;

        return $this;
    }

    /**
     * Gets at_type
     *
     * @return string|null
     */
    public function getAtType()
    {
        return $this->container['at_type'];
    }

    /**
     * Sets at_type
     *
     * @param string|null $at_type at_type
     *
     * @return self
     */
    public function setAtType($at_type)
    {
        if (is_null($at_type)) {
            throw new \InvalidArgumentException('non-nullable at_type cannot be null');
        }
        $this->container['at_type'] = $at_type;

        return $this;
    }

    /**
     * Gets member
     *
     * @return \OpenAPI\Client\Model\SnapshotJsonInstantieJson[]|null
     */
    public function getMember()
    {
        return $this->container['member'];
    }

    /**
     * Sets member
     *
     * @param \OpenAPI\Client\Model\SnapshotJsonInstantieJson[]|null $member member
     *
     * @return self
     */
    public function setMember($member)
    {
        if (is_null($member)) {
            throw new \InvalidArgumentException('non-nullable member cannot be null');
        }
        $this->container['member'] = $member;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


